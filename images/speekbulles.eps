%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 8.0
%%AI8_CreatorVersion: 13.0.0
%%For: (PINAR) ()
%%Title: (TalkBubbles12.eps)
%%CreationDate: 1/15/2011 7:45 PM
%%BoundingBox: 200 350 1800 1650
%%HiResBoundingBox: 200 350 1800 1650
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset AGM_Gradient 1.0 0
%%+ procset Adobe_ColorImage_AI6 1.3 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_cshow 2.0 8
%%+ procset Adobe_shading_AI8 1.0 0
%AI5_FileFormat 4.0
%AI3_ColorUsage: Color
%AI3_IncludePlacedImages
%AI7_ImageSettings: 1
%%CMYKProcessColor: 0.709804 0.360784 0 0 (R=0 G=150 B=255)
%%+ 0.815686 0.164706 0.505882 0.007843 (R=0 G=156 B=143)
%%+ 0.501961 0 0 0 (R=109 G=207 B=246)
%%+ 0.592157 0.043137 1 0 (R=118 G=184 B=63)
%%+ 0.52549 0.333333 0.043137 0 (R=125 G=153 B=199)
%%+ 0.4 0.164706 0.388235 0 (R=158 G=184 B=163)
%%+ 0.435294 0.117647 0.968627 0 (R=158 G=184 B=63)
%%+ 0.411765 0.411765 0 0 (R=161 G=150 B=255)
%%+ 0.333333 0.415686 0 0 (R=186 G=150 B=255)
%%+ 0.219608 0.423529 1 0.023529 (R=199 G=146 B=36)
%%+ 0.129412 0.792157 0.913725 0.023529 (R=209 G=87 B=51)
%%+ 0.164706 0.078431 0.772549 0 (R=219 G=212 B=94)
%%+ 0.12549 0.098039 0.101961 0 (R=219 G=219 B=219)
%%+ 0.113725 0.458824 0.760784 0 (R=222 G=150 B=84)
%%+ 0.035294 0.996078 0.003922 0 (R=229 G=1 B=140)
%%+ 0.058824 0.686274 0.258824 0 (R=229 G=115 B=140)
%%+ 0.007843 0.988235 0.003922 0 (R=236 G=0 B=140)
%%+ 0.015686 0.752941 0.211765 0 (R=236 G=102 B=140)
%%+ 0.019608 0.737255 0.239216 0 (R=236 G=105 B=138)
%%+ 0.023529 0.756863 0.988235 0 (R=236 G=99 B=36)
%%+ 0.058824 0.039216 0.043137 0 (R=237 G=237 B=237)
%%+ 0.003922 0.992157 0.972549 0 (R=237 G=28 B=36)
%%+ 0 0.729412 0.964706 0 (R=246 G=105 B=36)
%%+ 0.003922 0.505882 0.968627 0 (R=246 G=146 B=36)
%%+ 0.023529 0.352941 0.972549 0 (R=246 G=173 B=36)
%%+ 0 0.501961 0.741176 0 (R=247 G=148 B=83)
%%+ 0.035294 0.137255 0.792157 0 (R=247 G=212 B=83)
%%+ 0.035294 0.035294 0.996078 0 (R=252 G=230 B=0)
%%+ 0 0.917647 0.392157 0 (R=255 G=51 B=105)
%%+ 0 0.917647 0.827451 0 (R=255 G=51 B=51)
%%+ 0.698039 0.67451 0.639216 0.741176 (R=35 G=31 B=32)
%%+ 0.756863 0.219608 0.505882 0.023529 (R=59 G=150 B=138)
%%+ 0.74902 0.678431 0.670588 0.901961 ([Registration])
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 1 0 () 
%AI3_TemplateBox: 1000.5 999.5 1000.5 999.5
%AI3_TileBox: 694 604 1306 1396
%AI3_DocumentPreview: Header
%AI5_ArtSize: 1600 1300
%AI5_RulerUnits: 6
%AI5_ArtFlags: 0 0 0 1 0 0 1 0 1
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI8_OpenToView: -3071 4359 0.125 1014 891 18 0 0 44 73 0 0
%AI5_OpenViewLayers: 7
%%PageOrigin:-238 25
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI9_Flatten: 1
%AI12_CMSettings: 00.MS
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
userdict /lv1Fix true put
userdict /_contoneDevice true put
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
AGM_Gradient_Sep_private begin
/initializeSeps{
	/currentoverprint { _of } def
	_noImage not _level2PS not and{
		/linealFill{
			currentoverprint{
				0 0 1 1 rectfill
			}{
				mySave
				8 setImageParms
				_color{
					_nCustomColorSD begin
						cyan magenta yellow black
	
						_spotColor{
							spot1/tintImage spot1/tintValue get 1 exch sub makeByte8 put
							spot2/tintImage spot2/tintValue get 1 exch sub makeByte8 put
						}if
				 end
	
					4{
						makeByte8 4 1 roll
					}repeat
					true 4 _nCustomColorSD ncolorimage
				}{
					_nCustomColorSD/black get 1 exch sub makeByte8 
					_nCustomColorSD bwImage
				}ifelse
				myRestore
			}ifelse
		}def
	}if
	/_whiteBytes 1 makeByte8 pt
	 /knockOut{
		_noImage _level2PS or currentoverprint or{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}ifelse
	}def
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk nd
			/magentaInk nd
			/yellowInk nd
			/blackInk nd
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{ 	
				
			_fillSD begin
				/_spot1 spot1 pt
				/_spot2 spot2 pt
		 end
			
			exch dup _spot1/name get eq{
				_spot1 _spot2
			}{
				_spot2 _spot1
			}ifelse
		 begin
			 begin
					/name xd
					1 exch sub /tintValue xd
					4{
						tintValue mul 4 1 roll
					}repeat
					_spotColor not{
						/tintValue null def
					}if
			 end
				/tintValue 0 def
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/currentInk{
		true
		_inRipSep{
			currentcolorspace 0 get
			dup /DeviceGray eq
			1 index /DeviceCMYK eq or{
				pop
				currentcmykcolor add add add 0 eq{
					pop false
				}if
			}{
				/Separation eq{
					currentcolor 0 eq{
						pop false
					}if
				}if
			}ifelse
		}{
			currentgray 1 eq{
				pop false
			}if
		}ifelse
	}def
	/currentInkN{
	
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		{
			currentInk
		}{
			gsave
			_spot1 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			_spot2 begin
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					currentInk
				}{
					false
				}ifelse
		 end
			grestore
			
			or
		} ifelse
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			/_spot1 spot1 pt
			/_spot2 spot2 pt
			renderCMYK
	 end
		
		{
			fillOvp
		}{
			_spot1 begin
				gsave
				name null ne{
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
				}{
					1 setgray
				}ifelse
				fillOvp 
				grestore
		 end
			_spot2 begin
				name null ne{
					gsave
					true setoverprint
					spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					fillOvp
					grestore
				}if
		 end
			newpath
		}ifelse
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		currentoverprint{
			rectImage
		}{
			_enabledSmoothShade{
				fillRamp
			}{
				_color{
					_rampSD begin
						/cyanInk _cyanData 0 ne def
						/magentaInk _magentaData 0 ne def
						/yellowInk _yellowData 0 ne def
						/blackInk _blackData 0 ne def
				 end
					
					_nSamples setImageParms
					_nSamples expandSpot
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 _rampSD ncolorimage
				}{
					_rampSD begin
						/cyanInk false def
						/magentaInk false def
						/yellowInk false def
						/blackInk true def
				 end
					_nSamples setImageParms 
					_blackData _rampSD bwImage
				}ifelse
			}ifelse
		}ifelse
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					_inDistiller{
						false
					}{
						false
						currentpagedevice/SeparationColorNames get{name eq or}forall
						not
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and{	
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_renderCMYK not{
			_rampSD begin
				[/DeviceN 
					[
					spot1 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					spot2 begin
						name null ne tintImage null ne and{
							name
						}if
				 end
					]
					_inDistiller {
						/DeviceCMYK [
							spot1 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 1
								}{
									0 0 0 0 0
								}ifelse
						 end
							spot2 begin
								name null ne tintImage null ne and{
									spot_C spot_M spot_Y spot_K 2
								}{
									0 0 0 0 0
								}ifelse
						 end
							5 1 roll 6 -2 roll add
							dup 1 eq {
								pop
								8 /index cvx 1 /exch cvx /sub cvx
								9 1 /roll cvx
							}{
								2 eq {
									8 /index cvx 1 /exch cvx /sub cvx
									10 1 /roll cvx
								}if
							}ifelse
							4 1 /roll cvx 5 -2 /roll cvx
							8 /index cvx /mul cvx /exch cvx 9 /index cvx /mul cvx /add cvx 7 1 /roll cvx
							3 1 /roll cvx 4 -2 /roll cvx
							7 /index cvx /mul cvx /exch cvx 8 /index cvx /mul cvx /add cvx 6 1 /roll cvx
							2 1 /roll cvx 3 -2 /roll cvx
							6 /index cvx /mul cvx /exch cvx 7 /index cvx /mul cvx /add cvx 5 1 /roll cvx
							5 /index cvx /mul cvx /exch cvx 6 /index cvx /mul cvx /add cvx 4 1 /roll cvx
							6 -2 /roll cvx /pop cvx /pop cvx
						] cvx bind
					}{
						/DeviceCMYK {}
					}ifelse
				] setcolorspace
		 end
			/_nColorSpace currentcolorspace pt
		}if
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C0_Space _nColorSpace pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					spot1 begin 
						name null ne{
							tintValue
						}if
				 end
					spot2 begin 
						name null ne{
							tintValue
						}if
				 end
			 end
			] pt
			/_C1_Space _nColorSpace pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/initializeMultiPassSeps{
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
			/_spotDict xp
				_spotDict/name get null eq{
					false
				}{
					_spotDict/spot_C get
					_spotDict/spot_M get
					_spotDict/spot_Y get
					_spotDict/spot_K get
					_spotDict/name get
					ccThrough 
				}ifelse
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
	/getRampColorSpace{
		
		/_renderCMYK _rampSD begin renderCMYK end pt
		
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C0 [currentcolor] pt
			/_C0_Space currentcolorspace pt
		}{
			/_C0 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C0_Space /DeviceGray pt
		}ifelse
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		
		_renderCMYK{
			/_C1 [currentcolor] pt
			/_C1_Space currentcolorspace pt
		}{
			/_C1 [
				_nCustomColorSD begin
					0
					spot1 begin 
						name null ne
						tintValue null ne and
						spot1 spotChannel and{
							pop tintValue
						}if
				 end
					spot2 begin 
						name null ne
						tintValue null ne and
						spot2 spotChannel and{
							pop tintValue
						}if
				 end
					1 exch sub
			 end
			] pt
			/_C1_Space /DeviceGray pt
		}ifelse
		
		/_rampColorSpace _C0_Space pt
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 201 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeRectFill
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_bbox 4 array pt
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq _enabledSmoothShade or{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
			/_enabledSmoothShade false pt
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				/_enabledSmoothShade 
					_level3PS{
						_usingSmoothShade
						_producingSeps not
						currentoverprint not or and
						_noImage not and
					}{
						false
					}ifelse
				pt
				
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient/AGM_Gradient_private get /_illustrator get not{
				AGM_Gradient begin
			}if
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator dup
		 end
			not {
			 end
			}if
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inDistiller
		systemdict /currentdistillerparams known
	def
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
		_inDistiller or
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		/_useShells get /_usingShells xp
	}{
		/_usingShells false def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_forceToCMYK where{
		pop
	}{
		/_forceToCMYK false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
	def
}def
/initializeRectFill{
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
}def
/initializeLev1{
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			_rgbInCMYK{
				/Function [
					_cData sampFunc
					_mData sampFunc
					_yData sampFunc
					_kData sampFunc
				]
			}{
				/Function 
					bd
						/FunctionType 3
						/Domain [0 1]
						/Functions _rampFuncsArray
						/Bounds _boundsArray
						/Encode _encodeArray
					ed
			}ifelse
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	%
	/sampFunc{
		/_tmp exch pt
		bd
			_tmp length 1 eq {
				_tmp 0 get
				/_tmp 2 string pt
				dup _tmp 0 3 -1 roll put
				_tmp 1 3 -1 roll put
			}if
			/FunctionType 0
			/Order 1
			/Size [_tmp length]
			/Domain [0 1]
			/BitsPerSample 8
			/DataSource _tmp
			/Range [0 1]
		ed
	}def
	
	/fillRamp{
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne _rgbInCMYK or{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		/_rgbInCMYK false pt
		_producingSeps _forceToCMYK or _rgbRamp and {
			_spotColor{
				_renderCMYK
			}{
				_isCMYKSep
			}ifelse
		}{
			false
		}ifelse
		{
			_compositeJob{
				/_rgbInCMYK true pt
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				dup length string copy /_kData exch pt
				dup length string copy /_yData exch pt
				dup length string copy /_mData exch pt
				dup length string copy /_cData exch pt
			}{
				_rampFuncsArray _index
					_cyanPlate{_cyanData}if
						_magentaPlate{_magentaData}if
						_yellowPlate{_yellowData}if
						_blackPlate{_blackData}if
					_nSamples expandOne
					sampFunc
					dup begin /Decode [1 0] def end
				put
				/_invert false pt
			}ifelse
		}{
			_rampFuncsArray _index
				bd
					/FunctionType 2
					/Domain [0 1]
					/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
					_gradType 0 eq{
						_invert{/C1}{/C0}ifelse _C0
						_invert{/C0}{/C1}ifelse _C1
					}{
						_invert{/C0}{/C1}ifelse _C1
						_invert{/C1}{/C0}ifelse _C0
					}ifelse
				ed
			put
		}ifelse
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	/rampImage{
		_enabledSmoothShade{
			fillRamp
		}{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp _forceToCMYK not and{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			_forceToCMYK{
				3 npop setcmykcolor
			}{
				setrgbcolor 4 npop
			}ifelse
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			_forceToCMYK{
				6 npop setcmykcolor
			}{
				3 -1 roll pop pop
				1 exch sub /_tmp xp
				3{
					1 exch sub _tmp mul 1 exch sub 3 1 roll
				}repeat
				setrgbcolor 
				4 npop
			}ifelse
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		/_rampColorSpace _C0_Space pt
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/makeByte8{
	/_tmp 0 pt
	255 mul cvi
	8 string 8{
		dup _tmp 3 index put 
		/_tmp _tmp 1 add pt
	}repeat
	exch pop
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and _forceToCMYK not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData dup type /stringtype eq{
			/_ndx cvx /get cvx _d255 /exch cvx /get cvx
		}if
		
		_enabledSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/useRectImage{
	_subSampleOK _enabledSmoothShade not and{
		{
			mark
			0 1 dtransform atan cvi 90 mod 0 eq
			1 0 dtransform atan cvi 90 mod 0 eq
		} stopped
		{
			cleartomark
			false
		}
		{
			and exch pop
		} ifelse
	}{
		false
	}ifelse
}def
/linealImage{
	_noImage{
		rectImage
	}{
		_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get
				/rampImage get exec
		}{
			useRectImage{
				rectImage
			}{
				rampImage
			}ifelse
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_usingShells currentoverprint _producingSeps and _usingShells or pt
	/_firstShell true pt
	_enabledSmoothShade not{
		currentoverprint _producingSeps and{
			
			newpath
			clippath pathbbox 
			1 add 4 1 roll
			1 add 4 1 roll
			1 sub 4 1 roll
			1 sub 4 1 roll
			_bbox astore pop
			
			newpath
			_bbox 0 get _bbox 1 get moveto
			_bbox 2 get _bbox 1 get lineto
			_bbox 2 get _bbox 3 get lineto
			_bbox 0 get _bbox 3 get lineto
			closepath
			6 copy
			gsave _bUMatrix astore concat
			1 0 moveto 0 0 1 0 360 arc closepath
			eoclip fill
			popBSpace
		}{
			fill
		}ifelse
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
		radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD /spot1 get begin
							/name 3 index def
							/spot_K 4 index def
							/spot_Y 5 index def
							/spot_M 6 index def
							/spot_C 7 index def
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD/spot1 get begin
							/name 4 index def
							/spot_K 8 index def
							/spot_Y 9 index def
							/spot_M 10 index def
							/spot_C 11 index def
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 2 add index def
					/spot_Y _tmp 3 add index def
					/spot_M _tmp 4 add index def
					/spot_C _tmp 5 add index def
			 end
			}{
				pop
			}ifelse
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD/spot1 get /name get ne{
				_rampSD /spot2 get begin
					/name xd
					/spot_K _tmp 5 add index def
					/spot_Y _tmp 6 add index def
					/spot_M _tmp 7 add index def
					/spot_C _tmp 8 add index def
			 end
			}{
				pop
			}ifelse
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_ccProcess _ccRGB or{
			_rampType 3 eq _rampType 6 eq or{
				_rampSD /spot2 get begin
					/tintImage _gradType 0 eq{
						_tint2Data
					}{
						_tint1Data
					}ifelse
					def
					name null eq{
						/name /Black def
					}if
			 end
			}if
			_rampSD /spot1 get begin
				/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
					_tint1Data
				}{
					_tint2Data
				}ifelse
				def
				_rampType 2 eq _rampType 5 eq or{
					name null eq{
						/name _rampSD/spot2 get /name get def
						/spot_C _rampSD/spot2 get /spot_C get def
						/spot_M _rampSD/spot2 get /spot_M get def
						/spot_Y _rampSD/spot2 get /spot_Y get def
						/spot_K _rampSD/spot2 get /spot_K get def
						_rampSD/spot2 get /name null put
					}if
				}{
					name null eq{
						/name /Black def
					}if
				}ifelse
		 end
		}if
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_enabledSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_nSubSamples _nSamples pt
	/_optimize false pt
		
	_subSampleOK{
		/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
		/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
		
		_pChange .5 gt dup /_optimize xp{
			/_nSubSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc 1 _nSubSamples div pt
			/_sInc _nSamples 1 sub _nSubSamples 1 sub div pt
		}if
	}if
	0
	_nSubSamples
	[
	/dup cvx
	_optimize {
		/round cvx /cvi cvx
	} if
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
/radialRamp{
	_enabledSmoothShade{
		fillRamp
	}{
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		%
		%
		true
		_producingSeps _rgbRamp not and{
			_nSamples 1 gt{ 
				pop
				/_ndx 0 pt
				[blendColor] cvx exec
				currentInkN
				/_ndx _nSamples 1 sub pt
				[blendColor] cvx exec
				currentInkN
				or
			}if
		}if
		{
			_rampPoint
		
			_nSamples 1 sub
		
			_nRadSamples 
			[
				/dup cvx
		
				_optimize{
					/round cvx /cvi cvx
				}if
		
				/_ndx /exch cvx /pt cvx
				
				_usingShells{
					/_firstShell cvx{
						/_firstShell false pt
					}{
						0 0 3 index 360 0 arcn fill
					}/ifelse cvx
				}if
		
				blendColor
		
				_usingShells{
					0 0 3 /index cvx 0 360 /arc cvx 
				}{
					0 0 3 /index cvx 0 360 /arc cvx /fill cvx
				}ifelse
		
				/exch cvx _bInc /add cvx /exch cvx
		
				_sInc /add cvx
		
				_radHilite{
					_xBCInc _yBCInc /translate cvx
				}if
			] cvx bind
			repeat
		
			pop pop
		}{
			_usingShells{
				0 0 _rampPoint 360 0 arcn fill
			}if
		}ifelse
	
		_saveMatrix setmatrix
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_usingShells _rampIndex 1 eq and{
			fill
		}if
	
		_spotColor{
			nsetcustomcolorend
		}if
	}ifelse
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog
%%BeginSetup
userdict /_useSmoothShade false put
userdict /_aicmykps true put
userdict /_forceToCMYK true put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 AGM_Gradient /initializeAI get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI3_BeginRider
currentpacking true setpacking
setpacking
%AI3_EndRider
%AI5_Begin_NonPrinting
Np
%AI8_PluginGroupInfo
(Adobe Path Blends) (Adobe Blends Plugin) (Live Blends.aip)
%AI8_PluginGroupInfo
(Adobe Symbolism) (Adobe Symbolism) (Symbolism.aip)
%AI8_PluginGroupInfo
(Adobe Tracing Object) (Tracing) (TracingSuite.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (Calligraphic Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Flare Plugin) (Flare) (flare.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool.aip)
%AI8_PluginGroupInfo
(Pathfinder Suite) (Adobe Compound Shape) (PathFinder Suite.aip)
%AI8_PluginGroupInfo
(Adobe Deform Plugin) (Adobe Envelope Plugin) (Envelope and Warp.aip)
%AI8_PluginGroupInfo
(Adobe Planar Group) (Adobe Live Paint Plugin) (Live Paint.aip)
%AI5_End_NonPrinting--
1 Bn
%AI5_BeginGradient: (Unnamed gradient 52)
(Unnamed gradient 52) 1 2 Bd
[
<
2020202020202020202020201F1F1F1F1F1F1E1E1E1D1D1D1C1C1C1C1B1A1A191817161615141311
100F
>
<
1919191919191919191919191818181818181717171616161515141414131312111010100F0E0D0C
0B0A
>
<
1A1A1A1A1A1A1A1A1A1A1A1A191919191919181818171717171716161514141312121111100F0E0C
0B0B
>
0
<
DBDBDBDBDBDBDBDBDBDBDBDBDCDCDCDCDCDCDDDDDDDEDEDEDFDFE0E0E1E2E2E3E4E5E6E6E7E8E9EB
ECED
>
<
DBDBDBDBDBDBDBDBDBDBDBDBDCDCDCDCDCDCDDDDDDDEDEDEDFDFE0E0E1E2E2E3E4E5E6E6E7E8E9EB
ECED
>
<
DBDBDBDBDBDBDBDBDBDBDBDBDCDCDCDCDCDCDDDDDDDEDEDEDFDFE0E0E1E2E2E3E4E5E6E6E7E8E9EB
ECED
>
4 %_Br
[
0.12549 0.098039 0.101961 0 0.858824 0.858824 0.858824 2 78.5714 0 %_BS
%_0.12549 0.098039 0.101961 0 0.858824 0.858824 0.858824 (R=219 G=219 B=219) 0 1 5 78.5714 0 Bs
0.058824 0.039216 0.043137 0 0.929412 0.929412 0.929412 2 67.5824 100 %_BS
%_0.058824 0.039216 0.043137 0 0.929412 0.929412 0.929412 (R=237 G=237 B=237) 0 1 5 67.5824 100 Bs
BD
%AI5_EndGradient
%AI5_Begin_NonPrinting
Np
%AI8_BeginBrushPattern
(Unnamed Brush Pat)0 A
u
0 J 0 j 1 w 4 M []0 d0 XR
-7190.8833 9190.9551 m
-7099.0479 9190.9551 L
-7099.0479 9186.6758 L
-7190.8833 9186.6758 L
-7190.8833 9190.9551 L
n
0 O
0.698039 0.67451 0.639216 0.741176 0.137255 0.121569 0.12549 Xa
-7190.6631 9188.2754 m
-7191 9188.3418 -7190.4814 9188.5313 -7190.8833 9188.3887 C
-7190.8379 9188.2705 -7190.7725 9188.1816 -7190.6631 9188.2754 C
f
-7100.1675 9188.4414 m
-7101.2529 9189.2041 -7102.6816 9188.4336 -7103.8701 9188.9199 C
-7104.0098 9188.9521 -7103.8354 9188.502 -7104.1484 9188.6025 C
-7105.3008 9189.1953 -7107.1162 9188.8418 -7108.5195 9188.3848 C
-7108.4346 9188.2666 L
-7108.7021 9188.1816 -7109.0283 9188.5723 -7109.3115 9188.5176 C
-7109.3135 9188.4395 -7109.2207 9188.4063 -7109.2861 9188.2979 C
-7109.3574 9188.5352 -7109.7979 9188.4082 -7109.9189 9188.584 C
-7110.0303 9188.4922 -7110.0195 9188.3047 -7110.1641 9188.2002 C
-7110.3262 9188.4697 L
-7110.7769 9189.1094 -7111.4209 9188.4258 -7112.0361 9188.7559 C
-7112.0063 9188.6934 -7111.9453 9188.6445 -7111.9941 9188.584 C
-7112.9814 9188.9727 -7114.2168 9188.8994 -7115.3208 9189.043 C
-7115.2769 9188.9482 -7115.2363 9188.7754 -7115.3008 9188.668 C
-7115.3555 9188.9512 -7115.6963 9189.0225 -7115.9922 9189.0781 C
-7116.1255 9188.7871 -7116.4995 9189.3438 -7116.8467 9189.1826 C
-7116.8169 9189.1191 L
-7117.0732 9189.4238 -7117.1973 9188.9434 -7117.4053 9189.3086 C
-7117.5684 9189.0801 L
-7117.6807 9189.4902 -7117.9395 9188.8672 -7118.1514 9189.0762 C
-7118.1445 9189.1602 L
-7118.3442 9189.2598 -7118.4482 9189.0537 -7118.6338 9189.123 C
-7118.6514 9189.0762 L
-7119.0854 9189.1826 -7119.3379 9188.9551 -7119.3271 9189.2754 C
-7119.4795 9189.0186 -7118.9063 9189.1582 -7119.1455 9188.7842 C
-7120.5732 9189.1152 -7122.0459 9189.0498 -7123.4834 9189.0566 C
-7123.6465 9188.9277 -7123.7505 9188.8887 -7123.7871 9188.7666 C
-7123.9307 9188.832 -7124.3281 9188.8262 -7124.4585 9188.9902 C
-7124.4102 9188.9834 -7124.5513 9188.8262 -7124.6274 9188.8105 C
-7124.8887 9188.6895 -7124.9131 9189.1621 -7125.2002 9189.0186 C
-7125.0859 9188.9336 -7125.0469 9188.8301 -7125.0854 9188.7109 C
-7125.3301 9188.9609 -7125.6577 9188.9209 -7125.9473 9189.002 C
-7125.9023 9188.9482 -7125.8325 9188.916 -7125.8433 9188.8154 C
-7126.1602 9189.0986 -7126.4209 9188.7559 -7126.6982 9188.9346 C
-7126.5947 9188.75 L
-7127.0415 9188.5254 -7126.7266 9189.1367 -7127.1128 9189.0039 C
-7127.02 9188.9453 -7127.0527 9188.873 -7127.0361 9188.7979 C
-7127.3965 9189.1338 -7127.9795 9189.0225 -7128.3389 9189.1367 C
-7128.3174 9189.1113 -7128.3232 9189.0605 Y
-7128.7148 9189.1025 -7129.1245 9188.998 -7129.5552 9189.1445 C
-7129.7119 9189.0625 -7129.5039 9188.6934 -7129.9185 9188.7617 C
-7129.9033 9189.1328 -7130.6221 9188.9141 -7130.3779 9189.334 C
-7130.7319 9189.2734 -7131.2925 9189.1338 -7131.5283 9189.2598 C
-7131.3691 9189.1191 -7131.7007 9188.8066 -7131.4063 9188.7754 C
-7131.6289 9188.5498 L
-7131.5957 9188.3984 -7131.3999 9188.6016 -7131.4707 9188.4102 C
-7131.6182 9188.4258 -7132.0479 9188.5723 -7132.1797 9188.5117 C
-7132.4531 9188.7393 -7132.7041 9189.1641 -7133.1465 9189.2109 C
-7132.9385 9189.0664 -7133.2646 9188.8018 -7133.1235 9188.7383 C
-7133.7407 9189.4482 L
-7133.8877 9189.4658 -7133.7725 9189.1563 -7133.9854 9189.2529 C
-7133.9746 9189.3506 -7134.0674 9189.4121 -7134.1318 9189.4922 C
-7134.1875 9189.4482 -7134.7441 9189.584 -7134.8081 9189.2178 C
-7134.8735 9189.0762 -7134.5684 9189.1426 -7134.7314 9189.0117 C
-7135.0029 9189.0146 -7135.0151 9189.1406 -7135.2871 9189.1465 C
-7135.2925 9189.0977 L
-7135.4717 9189.043 -7135.8213 9189.2529 -7135.6265 9189.4551 C
-7135.5015 9189.4658 -7135.6738 9189.2354 -7135.4888 9189.3418 C
-7135.6152 9189.5537 -7135.9312 9189.6133 -7136.2031 9189.6162 C
-7136.1104 9189.5586 -7136.1216 9189.4609 -7136.0845 9189.3574 C
-7136.4497 9189.6445 -7136.8369 9189.7354 -7137.2451 9189.8555 C
-7137.2515 9190.0293 -7137.0928 9189.5391 -7137.0327 9189.6309 C
-7137.5557 9189.3896 -7138.1128 9189.9727 -7138.5479 9189.6201 C
-7138.4766 9189.5898 -7138.5098 9189.8672 -7138.5146 9189.8184 C
-7138.7666 9189.7969 -7138.7549 9189.5449 -7138.9189 9189.6377 C
-7138.9355 9189.4902 -7139.1255 9189.6855 -7139.2944 9189.7305 C
-7139.3818 9189.8369 -7139.3384 9189.6582 -7139.1914 9189.6426 C
-7139.4268 9189.7666 -7140.3691 9189.9941 -7140.9131 9189.7793 C
-7140.9023 9189.877 -7141.2471 9190.1377 -7141.3721 9190.127 C
-7141.3232 9189.8984 L
-7141.4375 9189.7617 -7141.7422 9189.918 -7141.7632 9189.7227 C
-7142.0303 9190 -7140.7344 9189.4863 -7141.0957 9189.7002 C
-7141.1895 9189.5098 -7141.5991 9190.0645 -7141.5215 9189.7529 C
-7141.7725 9189.7617 -7142.0161 9190.0186 -7142.2559 9189.8047 C
-7142.1865 9189.8418 -7142.0522 9189.4873 -7142.2549 9189.5039 C
-7142.6123 9189.5449 -7142.3564 9189.6133 -7142.6465 9189.6895 C
-7142.8281 9189.7832 L
-7142.8398 9190.0059 -7143.1475 9189.7529 -7143.0146 9190.002 C
-7143.0586 9189.8184 -7143.5337 9190.1152 -7143.4971 9189.7461 C
-7143.4473 9189.4551 L
-7143.6016 9189.4766 -7143.7002 9189.7617 -7143.8213 9189.8896 C
-7143.8418 9189.8633 -7143.8823 9189.8047 -7143.8745 9189.7578 C
-7143.8994 9190.2031 -7144.2432 9189.7207 -7144.4268 9190.0645 C
-7144.7505 9189.9102 -7145.2495 9190.0498 -7145.4023 9189.7734 C
-7145.6514 9189.9082 -7145.8784 9190.0674 -7146.1621 9189.9727 C
-7146.1055 9189.9307 -7146.0283 9189.918 -7146.0122 9189.8223 C
-7146.1904 9189.6914 -7146.2344 9189.8086 -7146.3975 9189.8809 C
-7146.3608 9189.8145 -7146.7539 9189.6201 -7146.9521 9189.4629 C
-7147.1992 9189.5957 -7147.1143 9189.8359 -7147.1392 9189.9824 C
-7147.3652 9189.543 -7147.8379 9190.2656 -7148.1211 9189.8672 C
-7148.0352 9189.8066 -7147.7598 9189.6514 -7147.9658 9189.541 C
-7148.1919 9189.1025 -7148.4219 9189.8643 -7148.7861 9189.6543 C
-7148.6968 9190.0186 L
-7148.8594 9189.793 -7149.2334 9190.2305 -7149.1963 9189.8594 C
-7149.3184 9189.9902 -7149.6265 9189.7383 -7149.5859 9190.0938 C
-7150.1846 9189.793 -7151.0425 9190.2754 -7151.4102 9189.6377 C
-7151.4961 9189.6973 -7151.7104 9189.6367 -7151.6665 9189.8193 C
-7151.5239 9190.0176 -7151.4673 9189.6777 -7151.4141 9189.8125 C
-7151.4912 9189.8232 -7151.5078 9189.9209 -7151.5161 9189.9697 C
-7151.7021 9189.8887 -7151.8486 9189.8633 -7151.6729 9189.5674 C
-7152.0869 9189.3477 -7152.1001 9190.1719 -7152.6274 9190.0322 C
-7152.6035 9189.8857 -7152.6436 9189.8301 -7152.7979 9189.8535 C
-7153.0903 9190.1055 L
-7153.4312 9190.0469 -7153.2842 9189.7705 -7153.2925 9189.5215 C
-7153.4746 9189.5645 -7153.6973 9189.5527 -7153.7803 9189.7383 C
-7154.0015 9189.4258 L
-7153.8398 9189.6514 -7154.1514 9189.5762 -7154.2368 9189.6367 C
-7154.1514 9189.5762 L
-7154.1846 9189.4697 -7154.3955 9189.5352 -7154.5024 9189.5664 C
-7154.4766 9189.7207 -7154.2617 9189.7832 -7154.1445 9189.8281 C
-7154.2373 9189.9375 -7154.3823 9189.9121 -7154.5059 9190.041 C
-7154.4648 9189.7969 -7154.8027 9189.8672 -7154.9473 9189.8418 C
-7155.1133 9189.7891 -7155.1348 9190.0605 -7155.1831 9190.0527 C
-7155.1875 9189.9258 -7155.4541 9190.0313 -7155.3247 9189.8535 C
-7155.2681 9189.8125 -7155.1953 9189.9766 -7155.1016 9189.8643 C
-7155.2109 9189.7705 -7155.1982 9189.5498 -7155.4258 9189.7109 C
-7155.5967 9189.832 -7155.3818 9190.1934 -7155.7061 9190.0391 C
-7155.6211 9189.9785 -7155.6055 9189.8809 -7155.5391 9189.793 C
-7155.8433 9189.666 L
-7155.8564 9189.8887 L
-7155.8975 9189.832 -7155.8691 9189.8125 -7155.8877 9189.7832 C
-7155.9785 9190.0176 -7156.3521 9189.8555 -7156.4209 9190.1191 C
-7156.5742 9190.1426 -7156.7441 9189.9648 -7156.8906 9189.9395 C
-7156.8623 9189.9199 L
-7157.0415 9189.7891 -7157.2793 9189.875 -7157.4297 9190.0254 C
-7157.4219 9189.9766 L
-7157.5195 9189.959 -7157.7505 9189.9941 -7157.8735 9190.125 C
-7158.1201 9189.957 -7157.9561 9189.2842 -7158.2295 9189.5645 C
-7158.48 9189.5723 -7158.6221 9189.9727 -7158.5215 9190.1152 C
-7158.9717 9189.9648 -7159.4834 9190.3281 -7159.9009 9189.9824 C
-7159.9658 9190.0723 -7159.9248 9190.1289 -7160.0586 9190.1816 C
-7160.7197 9190.0938 -7161.4551 9190.4453 -7161.9814 9190.0078 C
-7161.79 9189.9141 -7161.9688 9189.7842 -7161.9727 9189.6582 C
-7162.1309 9189.8574 -7162.1631 9189.4512 -7162.2197 9189.793 C
-7162.2041 9189.9941 -7162.2197 9190.0918 -7162.0337 9190.1729 C
-7162.4282 9190.2813 -7163.0283 9190.2813 -7163.2471 9190.0938 C
-7163.1377 9190.1865 -7163.2227 9190.248 -7163.3086 9190.3086 C
-7163.2803 9189.9873 -7163.5713 9189.9395 -7163.7915 9190.0527 C
-7163.8223 9190.248 L
-7163.9658 9190.0469 L
-7164.0503 9190.1094 -7164.0591 9190.457 -7164.2773 9190.2695 C
-7164.2891 9190.1934 -7164.3018 9190.1162 -7164.3418 9190.0605 C
-7164.5693 9190.2207 -7164.8906 9190.4922 -7165.1377 9190.3262 C
-7165.3398 9190.041 L
-7165.4453 9190.0723 -7165.6235 9190.2441 -7165.4375 9190.3262 C
-7165.8594 9190.1543 -7166.1309 9190.1328 -7166.2646 9189.8857 C
-7166.9912 9190.4873 -7168.0459 9190.5117 -7168.8906 9190.4688 C
-7168.8652 9190.3223 L
-7169.0923 9190.1855 -7168.9834 9190.5781 -7169.1416 9190.4766 C
-7169.0684 9190.3369 -7169.3145 9190.1729 -7169.1362 9190.002 C
-7169.4609 9189.8477 -7169.5547 9190.2559 -7169.7656 9190.3223 C
-7169.7979 9190.5146 -7169.5957 9190.1992 -7169.6367 9190.4434 C
-7169.6729 9190.5117 -7170.0859 9190.293 -7170.1362 9190.584 C
-7170.2178 9190.4697 -7170.1543 9190.2559 -7170.1104 9190.1377 C
-7170.3086 9190.2793 L
-7170.5513 9189.9395 -7169.7559 9189.6719 -7170.0107 9189.2529 C
-7170.1934 9189.2979 L
-7170.3682 9188.9941 -7169.71 9188.9551 -7170.1689 9188.8506 C
-7170.3682 9188.9941 -7170.5381 9189.416 -7170.3608 9189.5449 C
-7170.7754 9189.625 -7170.5527 9190.2383 -7170.9985 9190.2139 C
-7171.1201 9190.043 -7170.6416 9190.1729 -7170.7275 9189.9336 C
-7170.9375 9189.6992 -7171.1484 9190.0645 -7171.3354 9189.9824 C
-7171.1279 9190.0918 -7171.3032 9190.3857 -7171.4375 9190.4395 C
-7171.6641 9190.3018 -7171.29 9190.1641 -7171.6113 9190.1338 C
-7171.6641 9190.3018 -7171.9595 9190.4277 -7171.7041 9190.5449 C
-7171.8203 9190.9258 -7172.0381 9190.4395 -7172.2129 9190.7344 C
-7172.3174 9190.4658 -7171.8823 9190.1152 -7172.2354 9189.9814 C
-7172.1792 9190.2393 -7172.6704 9190.332 -7172.4839 9190.7139 C
-7172.6221 9190.6406 -7172.6367 9190.4375 -7172.5361 9190.2793 C
-7172.7334 9190.1201 -7173.0151 9190.75 -7173.0801 9190.2383 C
-7173.1479 9190.502 L
-7173.21 9190.416 -7173.2983 9190.3506 -7173.3994 9190.209 C
-7173.5732 9190.2041 -7173.96 9190.5664 -7173.9443 9190.168 C
-7174 9190.209 -7174.3975 9190.1914 -7174.2441 9190.4658 C
-7173.9971 9190.6338 -7173.96 9190.2656 -7173.8223 9190.6377 C
-7173.9971 9190.334 -7174.1787 9190.6777 -7174.3213 9190.7793 C
-7174.3447 9190.625 L
-7174.4297 9190.6855 -7174.6255 9190.6514 -7174.6787 9190.8184 C
-7174.6133 9190.7305 -7174.6475 9190.625 -7174.7148 9190.5879 C
-7174.8042 9190.8223 L
-7175.1494 9190.9395 -7174.8857 9190.4102 -7175.2217 9190.4785 C
-7174.9663 9190.2969 L
-7175.0225 9190.3359 -7175.1367 9190.1162 -7175.2979 9190.1895 C
-7175.3604 9190.4033 -7175.4775 9190.6602 -7175.5313 9190.8262 C
-7175.7207 9190.9199 -7175.6162 9190.585 -7175.8027 9190.8047 C
-7175.5586 9190.5469 L
-7175.5215 9190.4766 -7175.7231 9190.1934 -7175.9761 9190.1992 C
-7176.1377 9190.2734 -7176.3887 9190.582 -7176.1338 9190.6992 C
-7176.2607 9190.7031 -7176.4385 9190.5723 -7176.3379 9190.416 C
-7176.6255 9190.4902 -7176.2998 9190.6465 -7176.5479 9190.7793 C
-7176.6494 9190.6367 -7176.9658 9190.4336 -7177.1563 9190.2266 C
-7176.8975 9189.8682 L
-7177.0693 9189.8643 L
-7176.8467 9189.5781 -7177.1826 9189.6465 -7177.0566 9189.3438 C
-7177.1743 9189.2969 -7177.3169 9189.3994 -7177.4307 9189.4785 C
-7177.0864 9189.9629 -7177.8159 9190.1406 -7177.7158 9190.582 C
-7178.1875 9190.7031 -7178.0107 9189.5078 -7178.5024 9190.1992 C
-7178.4219 9190.3145 -7178.6533 9190.6504 -7178.3564 9190.5225 C
-7178.6494 9190.4746 -7178.5557 9190.9658 -7178.9014 9190.7832 C
-7178.6455 9190.6016 -7179.1763 9190.3359 -7178.8066 9190.0723 C
-7178.8311 9190.2178 -7178.6001 9190.1826 -7178.5435 9190.1426 C
-7178.6641 9189.9727 -7178.5186 9189.6973 -7178.8184 9189.6973 C
-7179.0015 9189.7393 -7179.2524 9189.748 -7179.2158 9189.9785 C
-7179.2085 9190.2314 -7178.9365 9189.9512 -7179.0537 9190.207 C
-7179.4185 9190.2949 -7179.4795 9189.9102 -7179.6304 9190.3594 C
-7179.3999 9190.3232 -7179.3423 9190.584 -7179.3467 9190.7578 C
-7179.6143 9190.8633 L
-7179.5625 9190.6953 L
-7179.9922 9190.5742 -7179.6895 9191 -7180.1055 9190.9551 C
-7180.3008 9190.623 L
-7180.2017 9190.3369 -7179.6953 9190.75 -7179.7695 9190.2842 C
-7180.04 9190.2656 -7180.1299 9190.502 -7180.3848 9190.3818 C
-7180.3281 9190.3418 -7180.2505 9190.3301 -7180.1943 9190.2891 C
-7180.2915 9190.2734 -7180.3877 9189.6563 -7180.7734 9190.0176 C
-7180.9727 9190.1582 -7180.8262 9190.1826 -7180.8311 9190.3574 C
-7181.2656 9190.4102 -7181.3955 9190.5879 -7181.6753 9190.6152 C
-7181.6177 9190.2754 -7182.1699 9190.582 -7181.8608 9190.2344 C
-7181.7188 9190.4336 -7181.0903 9190.4141 -7180.9365 9190.0898 C
-7181.0947 9189.6865 -7180.5952 9190.1465 -7180.5024 9189.7383 C
-7180.8506 9189.7285 -7180.8335 9189.332 -7180.8896 9189.0723 C
-7180.9863 9189.0537 -7181.0801 9189.1641 -7181.1377 9189.2041 C
-7181.1787 9189.4482 -7181.0522 9189.4453 -7181.0449 9189.6973 C
-7181.4336 9189.6309 -7181.8081 9189.7666 -7182.0225 9190.0059 C
-7182.1523 9189.8848 -7182.1113 9189.6406 -7181.9575 9189.6162 C
-7182.4199 9189.6895 -7182.9141 9189.6563 -7183.3535 9189.582 C
-7183.0693 9189.9814 -7183.8433 9189.6758 -7183.6494 9190.0078 C
-7183.4141 9190.0977 -7183.2119 9190.3818 -7183.3418 9190.5605 C
-7183.4888 9190.5352 -7183.3369 9190.3857 -7183.3984 9190.3008 C
-7183.5859 9190.5186 -7183.6895 9189.9512 -7183.8735 9190.2949 C
-7183.4512 9190.166 -7183.7915 9189.8086 -7183.7139 9189.4961 C
-7184.0186 9189.6719 -7183.7007 9189.2734 -7184.0024 9189.2734 C
-7184.3057 9189.4473 -7184.6787 9189.584 -7185.0161 9189.6514 C
-7185.4399 9189.3555 -7186.0898 9189.6465 -7186.4683 9189.6582 C
-7186.6665 9189.5 -7186.5322 9189.1465 -7186.7471 9189.085 C
-7186.9995 9189.0918 -7186.5601 9189.4658 -7186.9336 9189.3047 C
-7186.8975 9189.2344 L
-7187.0107 9189.3154 -7187.5825 9188.9941 -7187.6929 9189.502 C
-7187.5776 9189.1191 L
-7187.6475 9189.084 -7187.7119 9189.1719 -7187.7695 9189.2129 C
-7187.7725 9189.0879 -7187.8535 9188.9746 -7187.7402 9188.8926 C
-7187.9707 9188.6289 -7188.2241 9188.9346 -7188.4746 9188.9453 C
-7188.3135 9189.1719 L
-7188.7422 9189.3496 -7189.0293 9189.125 -7189.4443 9189.2041 C
-7189.4316 9188.9824 L
-7189.6787 9189.1152 L
-7189.6182 9188.8994 -7189.8447 9188.7617 -7189.9751 9188.9414 C
-7189.3335 9188.3984 L
-7189.1553 9188.5293 -7189.5283 9188.666 -7189.4165 9188.8848 C
-7189.3213 9189.0762 -7188.9375 9189.0146 -7188.8755 9188.8018 C
-7189.0225 9188.7773 -7189.0293 9188.8262 -7189.1436 9188.9063 C
-7189.1919 9188.5977 -7188.9688 9188.6094 -7188.8584 9188.4033 C
-7188.9355 9188.416 -7189.0449 9188.3223 -7189.0615 9188.4199 C
-7188.9102 9188.2695 -7188.7578 9188.2461 -7188.5059 9188.2383 C
-7188.6763 9188.3594 -7188.4131 9188.4297 -7188.4775 9188.5176 C
-7188.4575 9188.2461 -7188.2168 9188.1621 -7187.9053 9188.2383 C
-7187.6831 9188.5527 -7187.3208 9188.0361 -7186.96 9188.123 C
-7187.1064 9188.3984 -7187.2935 9188.6191 -7187.5127 9188.7305 C
-7187.2861 9188.8682 -7187.2607 9188.7227 -7187.0337 9188.8613 C
-7186.9238 9188.6563 -7186.8457 9188.3418 -7186.5503 9188.2168 C
-7186.5342 9188.4199 L
-7186.2666 9188.3154 -7186.2666 9188.0146 -7185.9258 9188.0723 C
-7185.3418 9188.1719 -7184.7407 9188.1719 -7184.2949 9188.1973 C
-7184.2783 9188.3994 L
-7184.0303 9187.9658 -7183.4521 9188.2393 -7183.1182 9188.0469 C
-7182.5503 9188.2422 -7181.8848 9187.8535 -7181.5938 9188.2031 C
-7180.5913 9188.0469 -7179.7148 9187.8945 -7178.6768 9187.9688 C
-7178.8516 9188.2637 L
-7178.6655 9188.0469 -7178.7305 9188.4336 -7178.5479 9188.3896 C
-7178.7578 9188.1543 -7178.2949 9188.084 -7178.1665 9187.9033 C
-7177.7041 9188.1328 -7177.1104 9187.8818 -7176.7007 9187.6758 C
-7176.6846 9187.8789 L
-7176.2705 9187.498 -7175.7759 9187.832 -7175.2598 9187.8945 C
-7175.2007 9187.9785 -7175.1074 9188.1689 -7174.9536 9188.1465 C
-7174.6738 9187.8184 -7174.5273 9187.8418 -7174.1167 9187.6367 C
-7173.8169 9187.6367 -7173.3301 9187.7178 -7173.0254 9187.8457 C
-7171.8975 9187.3848 -7170.7456 9187.6797 -7169.5732 9187.4023 C
-7169.4888 9187.6406 L
-7168.3521 9187.1309 -7166.9541 9187.5938 -7165.9839 9187.332 C
-7166.0776 9187.7393 L
-7165.7734 9187.8643 -7165.3843 9187.6328 -7165.4619 9187.3438 C
-7165.1567 9187.4688 -7164.7007 9187.1465 -7164.5068 9187.4814 C
-7164.1953 9187.5566 -7164.1255 9187.293 -7163.8662 9187.2383 C
-7163.2422 9187.3926 -7163.0107 9187.3574 -7162.4224 9187.2813 C
-7162.5684 9187.2559 L
-7162.6328 9187.3457 -7162.6387 9187.5186 -7162.4922 9187.5449 C
-7162.2725 9187.4307 -7161.6846 9187.6543 -7161.9033 9187.168 C
-7161.2754 9187.4482 -7160.4385 9186.9395 -7159.8271 9187.3184 C
-7159.8789 9187.1855 -7159.7246 9187.1602 -7159.6602 9187.0703 C
-7159.1089 9187.0645 -7158.5293 9187.3359 -7158.0898 9187.1094 C
-7158.0024 9187.1758 -7158.2295 9187.3359 -7158.0049 9187.3496 C
-7157.8721 9187.2979 -7158.0024 9187.1758 -7157.8384 9187.1016 C
-7156.9453 9186.8535 -7156.0303 9187.3574 -7155.2188 9187.293 C
-7153.7754 9187.0361 -7152.2695 9187.166 -7150.8867 9187.123 C
-7150.9023 9187.2207 L
-7150.4395 9186.8477 -7149.8159 9187.6025 -7149.4463 9187.041 C
-7149.3369 9187.1338 -7149.0283 9187.085 -7149.1094 9187.2734 C
-7148.7407 9187.0098 -7148.0771 9187.5215 -7147.5439 9187.1865 C
-7147.5928 9187.1777 -7147.6211 9187.1973 -7147.6777 9187.2393 C
-7147.1392 9187.4551 -7146.6641 9187.1602 -7146.0957 9187.3555 C
-7146.1533 9187.3975 -7146.2583 9187.4277 -7146.2754 9187.5254 C
-7146.0557 9187.7129 -7145.7549 9187.1133 -7145.6348 9187.584 C
-7145.5088 9187.5801 -7145.5449 9187.3477 -7145.6221 9187.3613 C
-7144.3779 9187.5449 -7143.0498 9187.2441 -7141.7549 9187.1367 C
-7140.8271 9187.418 -7141.6982 9187.9297 -7140.9663 9187.5781 C
-7140.9063 9187.6689 -7140.9229 9187.3984 -7140.9131 9187.4961 C
-7140.6299 9187.3643 -7140.4717 9188.0215 -7140.2754 9187.7754 C
-7140.3564 9187.4863 -7140.1445 9187.6133 -7140.1387 9187.4375 C
-7139.5713 9187.625 -7139.4575 9187.8857 -7139.0098 9187.666 C
-7139.0435 9187.8184 L
-7138.5186 9187.3887 -7137.9102 9187.6191 -7137.4673 9187.123 C
-7134.5728 9187.0322 -7131.7983 9186.7578 -7128.9761 9186.7002 C
-7126.1865 9186.7949 -7123.4551 9186.5723 -7120.6221 9186.8359 C
-7119.9585 9187.2354 -7119.9087 9187.2246 -7119.1797 9187.0625 C
-7119.2095 9187.127 -7119.2549 9187.1426 -7119.2061 9187.2031 C
-7119.1699 9186.875 -7118.6929 9187.1719 -7118.6235 9186.8594 C
-7117.5762 9186.9199 -7116.6113 9186.8301 -7115.5337 9186.8281 C
-7115.7041 9186.8633 -7115.7896 9187.1309 -7115.5869 9187.1094 C
-7115.3755 9186.8994 L
-7115.3408 9186.9922 L
-7115.2021 9186.9434 -7115.0513 9186.7813 -7115.1943 9186.6758 C
-7112.4873 9186.3926 -7109.8242 9187.0498 -7107.1729 9186.9697 C
-7106.5439 9187.1064 -7105.6475 9186.9814 -7104.9629 9186.9141 C
-7102.9355 9187.3506 -7101.1084 9187.7041 -7099.0479 9187.3984 C
-7099.3174 9188.2461 -7100.1675 9188.4414 V
f
-7190.2578 9188.2422 m
-7190.1855 9188.4063 -7189.9497 9188.4961 -7190.1377 9188.7139 C
-7190.1611 9188.5605 -7190.2822 9188.3887 -7190.2578 9188.2422 C
f
-7183.9619 9189.9297 m
-7183.9536 9189.8809 -7183.8721 9189.9961 -7183.8521 9190.0225 C
-7183.9297 9190.0352 -7184.0024 9190.1729 -7184.0645 9190.0879 C
-7183.9854 9190.0762 -7183.9976 9189.998 -7183.9619 9189.9297 C
f
-7182.3521 9190.0273 m
-7182.3765 9190.1729 -7182.7207 9190.2891 -7182.9238 9190.3066 C
-7182.3521 9190.0273 L
f
-7180.8521 9190.6289 m
-7180.7227 9190.752 -7180.7583 9190.8193 -7180.9326 9190.8154 C
-7180.9453 9190.7383 -7180.8877 9190.6992 -7180.8521 9190.6289 C
f
-7180.7456 9190.2969 m
-7180.6211 9190.293 -7180.5591 9190.3789 -7180.4985 9190.4629 C
-7180.5029 9190.3369 -7180.7871 9190.541 -7180.7456 9190.2969 C
f
-7177.4893 9190.7207 m
-7177.4111 9190.709 -7177.2417 9190.5879 -7177.1689 9190.75 C
-7177.2505 9190.6367 -7177.5498 9190.9346 -7177.4893 9190.7207 C
f
-7175.9761 9190.5 m
-7175.9272 9190.5098 -7175.9072 9190.5361 -7175.8506 9190.4961 C
-7175.7607 9190.5625 -7175.8555 9190.6689 -7175.9312 9190.6826 C
-7175.9761 9190.5 L
f
-7148.4287 9189.9141 m
-7148.5923 9189.9863 L
-7148.5684 9189.8418 L
-7148.4287 9189.9141 L
f
-7136.3574 9189.9063 m
-7136.1943 9189.8145 -7136.2441 9190.043 -7136.2168 9190.0645 C
-7136.3643 9190.0801 -7136.1621 9189.8848 -7136.3574 9189.9063 C
f
-7129.8486 9189.1777 m
-7129.8984 9189.1816 L
-7129.8818 9188.8818 L
-7129.8486 9189.1777 L
f
U
%AI8_EndBrushPattern
%AI8_BeginBrushPattern
(Unnamed Brush Pat 2)0 A
u
0 J 0 j 1 w 4 M []0 d0 XR
-7191 9190.9971 m
-7099.1646 9190.9971 L
-7099.1646 9186.7178 L
-7191 9186.7178 L
-7191 9190.9971 L
n
0 O
0.698039 0.67451 0.639216 0.741176 0.137255 0.121569 0.12549 (R=35 G=31 B=32) 0 1 Xk
-7190.7798 9188.3174 m
-7191.1167 9188.3838 -7190.5981 9188.5732 -7191 9188.4307 C
-7190.9546 9188.3125 -7190.8892 9188.2236 -7190.7798 9188.3174 C
f
-7100.2842 9188.4834 m
-7101.3696 9189.2461 -7102.7983 9188.4756 -7103.9868 9188.9619 C
-7104.1265 9188.9941 -7103.9521 9188.5439 -7104.2651 9188.6445 C
-7105.4175 9189.2373 -7107.2329 9188.8838 -7108.6362 9188.4268 C
-7108.5513 9188.3086 L
-7108.8188 9188.2236 -7109.1455 9188.6143 -7109.4282 9188.5596 C
-7109.4302 9188.4814 -7109.3374 9188.4482 -7109.4028 9188.3398 C
-7109.4741 9188.5771 -7109.9146 9188.4502 -7110.0356 9188.626 C
-7110.1475 9188.5342 -7110.1362 9188.3467 -7110.2808 9188.2422 C
-7110.4429 9188.5117 L
-7110.8936 9189.1514 -7111.5376 9188.4678 -7112.1528 9188.7979 C
-7112.1235 9188.7354 -7112.0625 9188.6865 -7112.1108 9188.626 C
-7113.0981 9189.0146 -7114.3335 9188.9414 -7115.4375 9189.085 C
-7115.3936 9188.9902 -7115.3535 9188.8174 -7115.4175 9188.71 C
-7115.4722 9188.9932 -7115.8135 9189.0645 -7116.1089 9189.1201 C
-7116.2422 9188.8291 -7116.6162 9189.3857 -7116.9634 9189.2246 C
-7116.9336 9189.1611 L
-7117.1899 9189.4658 -7117.3145 9188.9854 -7117.5225 9189.3506 C
-7117.6851 9189.1221 L
-7117.7974 9189.5322 -7118.0562 9188.9092 -7118.2681 9189.1182 C
-7118.2612 9189.2021 L
-7118.4609 9189.3018 -7118.5649 9189.0957 -7118.7505 9189.165 C
-7118.7681 9189.1182 L
-7119.2021 9189.2246 -7119.4546 9188.9971 -7119.4438 9189.3174 C
-7119.5962 9189.0605 -7119.0229 9189.2002 -7119.2622 9188.8262 C
-7120.6899 9189.1572 -7122.1626 9189.0918 -7123.6001 9189.0986 C
-7123.7632 9188.9697 -7123.8672 9188.9307 -7123.9038 9188.8086 C
-7124.0474 9188.874 -7124.4448 9188.8682 -7124.5752 9189.0322 C
-7124.5269 9189.0254 -7124.6685 9188.8682 -7124.7441 9188.8525 C
-7125.0054 9188.7314 -7125.0298 9189.2041 -7125.3169 9189.0605 C
-7125.2026 9188.9756 -7125.1636 9188.8721 -7125.2021 9188.7529 C
-7125.4468 9189.0029 -7125.7744 9188.9629 -7126.0645 9189.0439 C
-7126.0195 9188.9902 -7125.9492 9188.958 -7125.96 9188.8574 C
-7126.2769 9189.1406 -7126.5376 9188.7979 -7126.8149 9188.9766 C
-7126.7114 9188.792 L
-7127.1582 9188.5674 -7126.8433 9189.1787 -7127.2295 9189.0459 C
-7127.1367 9188.9873 -7127.1694 9188.915 -7127.1528 9188.8398 C
-7127.5132 9189.1758 -7128.0962 9189.0645 -7128.4556 9189.1787 C
-7128.4341 9189.1533 -7128.4399 9189.1025 Y
-7128.8315 9189.1445 -7129.2412 9189.04 -7129.6719 9189.1865 C
-7129.8286 9189.1045 -7129.6206 9188.7354 -7130.0352 9188.8037 C
-7130.02 9189.1748 -7130.7388 9188.9561 -7130.4946 9189.376 C
-7130.8486 9189.3154 -7131.4092 9189.1758 -7131.6455 9189.3018 C
-7131.4858 9189.1611 -7131.8174 9188.8486 -7131.5229 9188.8174 C
-7131.7456 9188.5918 L
-7131.7124 9188.4404 -7131.5166 9188.6436 -7131.5874 9188.4521 C
-7131.7349 9188.4678 -7132.1646 9188.6143 -7132.2964 9188.5537 C
-7132.5698 9188.7813 -7132.8208 9189.2061 -7133.2632 9189.2529 C
-7133.0552 9189.1084 -7133.3813 9188.8438 -7133.2402 9188.7803 C
-7133.8574 9189.4902 L
-7134.0044 9189.5078 -7133.8892 9189.1982 -7134.1021 9189.2949 C
-7134.0913 9189.3926 -7134.1841 9189.4541 -7134.2485 9189.5342 C
-7134.3042 9189.4902 -7134.8608 9189.626 -7134.9248 9189.2598 C
-7134.9902 9189.1182 -7134.6851 9189.1846 -7134.8481 9189.0537 C
-7135.1196 9189.0566 -7135.1318 9189.1826 -7135.4038 9189.1885 C
-7135.4092 9189.1396 L
-7135.5884 9189.085 -7135.9385 9189.2949 -7135.7432 9189.4971 C
-7135.6182 9189.5078 -7135.7905 9189.2773 -7135.6055 9189.3838 C
-7135.7319 9189.5957 -7136.0479 9189.6553 -7136.3198 9189.6582 C
-7136.2271 9189.6006 -7136.2383 9189.5029 -7136.2012 9189.3994 C
-7136.5664 9189.6865 -7136.9536 9189.7773 -7137.3618 9189.8975 C
-7137.3682 9190.0713 -7137.2095 9189.5811 -7137.1494 9189.6729 C
-7137.6724 9189.4316 -7138.2295 9190.0146 -7138.6646 9189.6621 C
-7138.5933 9189.6318 -7138.6265 9189.9092 -7138.6313 9189.8604 C
-7138.8833 9189.8389 -7138.8716 9189.5869 -7139.0356 9189.6797 C
-7139.0522 9189.5322 -7139.2422 9189.7275 -7139.4111 9189.7725 C
-7139.4985 9189.8789 -7139.4551 9189.7002 -7139.3081 9189.6846 C
-7139.5435 9189.8086 -7140.4858 9190.0361 -7141.0298 9189.8213 C
-7141.0195 9189.9189 -7141.3638 9190.1797 -7141.4888 9190.1689 C
-7141.4399 9189.9404 L
-7141.5542 9189.8037 -7141.8589 9189.96 -7141.8799 9189.7646 C
-7142.1475 9190.042 -7140.8511 9189.5283 -7141.2124 9189.7422 C
-7141.3062 9189.5518 -7141.7158 9190.1064 -7141.6382 9189.7949 C
-7141.8892 9189.8037 -7142.1328 9190.0605 -7142.3726 9189.8467 C
-7142.3032 9189.8838 -7142.1689 9189.5293 -7142.3716 9189.5459 C
-7142.7295 9189.5869 -7142.4731 9189.6553 -7142.7632 9189.7314 C
-7142.9448 9189.8252 L
-7142.9565 9190.0479 -7143.2642 9189.7949 -7143.1313 9190.0439 C
-7143.1753 9189.8604 -7143.6504 9190.1572 -7143.6138 9189.7881 C
-7143.5645 9189.4971 L
-7143.7183 9189.5186 -7143.8169 9189.8037 -7143.9385 9189.9316 C
-7143.9585 9189.9053 -7143.9995 9189.8467 -7143.9912 9189.7998 C
-7144.0161 9190.2451 -7144.3599 9189.7627 -7144.5435 9190.1064 C
-7144.8672 9189.9521 -7145.3662 9190.0918 -7145.5195 9189.8154 C
-7145.7681 9189.9502 -7145.9951 9190.1094 -7146.2788 9190.0146 C
-7146.2222 9189.9727 -7146.1455 9189.96 -7146.1289 9189.8643 C
-7146.3071 9189.7334 -7146.3511 9189.8506 -7146.5142 9189.9229 C
-7146.4775 9189.8564 -7146.8706 9189.6621 -7147.0688 9189.5049 C
-7147.3159 9189.6377 -7147.2314 9189.8779 -7147.2559 9190.0244 C
-7147.4819 9189.585 -7147.9546 9190.3076 -7148.2378 9189.9092 C
-7148.1519 9189.8486 -7147.8765 9189.6934 -7148.0825 9189.583 C
-7148.3086 9189.1445 -7148.5386 9189.9063 -7148.9028 9189.6963 C
-7148.8135 9190.0605 L
-7148.9761 9189.835 -7149.3501 9190.2725 -7149.3135 9189.9014 C
-7149.4351 9190.0322 -7149.7432 9189.7803 -7149.7026 9190.1357 C
-7150.3013 9189.835 -7151.1592 9190.3174 -7151.5269 9189.6797 C
-7151.6128 9189.7393 -7151.8271 9189.6787 -7151.7832 9189.8613 C
-7151.6406 9190.0596 -7151.5845 9189.7197 -7151.5308 9189.8545 C
-7151.6079 9189.8652 -7151.6245 9189.9629 -7151.6328 9190.0117 C
-7151.8188 9189.9307 -7151.9653 9189.9053 -7151.7896 9189.6094 C
-7152.2036 9189.3896 -7152.2168 9190.2139 -7152.7441 9190.0742 C
-7152.7202 9189.9277 -7152.7603 9189.8721 -7152.9146 9189.8955 C
-7153.2075 9190.1475 L
-7153.5479 9190.0889 -7153.4009 9189.8125 -7153.4092 9189.5635 C
-7153.5913 9189.6064 -7153.8145 9189.5947 -7153.8975 9189.7803 C
-7154.1182 9189.4678 L
-7153.9565 9189.6934 -7154.2681 9189.6182 -7154.3535 9189.6787 C
-7154.2681 9189.6182 L
-7154.3013 9189.5117 -7154.5122 9189.5771 -7154.6191 9189.6084 C
-7154.5933 9189.7627 -7154.3784 9189.8252 -7154.2612 9189.8701 C
-7154.3545 9189.9795 -7154.4995 9189.9541 -7154.6226 9190.083 C
-7154.5815 9189.8389 -7154.9194 9189.9092 -7155.0645 9189.8838 C
-7155.23 9189.8311 -7155.2515 9190.1025 -7155.2998 9190.0947 C
-7155.3042 9189.9678 -7155.5708 9190.0732 -7155.4414 9189.8955 C
-7155.3848 9189.8545 -7155.3125 9190.0186 -7155.2183 9189.9063 C
-7155.3276 9189.8125 -7155.3149 9189.5918 -7155.5425 9189.7529 C
-7155.7134 9189.874 -7155.4985 9190.2354 -7155.8228 9190.0811 C
-7155.7378 9190.0205 -7155.7222 9189.9229 -7155.6558 9189.835 C
-7155.96 9189.708 L
-7155.9731 9189.9307 L
-7156.0142 9189.874 -7155.9858 9189.8545 -7156.0044 9189.8252 C
-7156.0952 9190.0596 -7156.4688 9189.8975 -7156.5376 9190.1611 C
-7156.6909 9190.1846 -7156.8608 9190.0068 -7157.0073 9189.9814 C
-7156.9795 9189.9619 L
-7157.1582 9189.8311 -7157.3965 9189.917 -7157.5464 9190.0674 C
-7157.5386 9190.0186 L
-7157.6362 9190.001 -7157.8672 9190.0361 -7157.9902 9190.167 C
-7158.2368 9189.999 -7158.0728 9189.3262 -7158.3462 9189.6064 C
-7158.5967 9189.6143 -7158.7388 9190.0146 -7158.6382 9190.1572 C
-7159.0884 9190.0068 -7159.6001 9190.3701 -7160.0176 9190.0244 C
-7160.0825 9190.1143 -7160.0415 9190.1709 -7160.1753 9190.2236 C
-7160.8364 9190.1357 -7161.5718 9190.4873 -7162.0981 9190.0498 C
-7161.9067 9189.9561 -7162.0854 9189.8262 -7162.0894 9189.7002 C
-7162.2476 9189.8994 -7162.2798 9189.4932 -7162.3364 9189.835 C
-7162.3208 9190.0361 -7162.3364 9190.1338 -7162.1504 9190.2148 C
-7162.5449 9190.3232 -7163.1455 9190.3232 -7163.3638 9190.1357 C
-7163.2544 9190.2285 -7163.3394 9190.29 -7163.4253 9190.3506 C
-7163.3975 9190.0293 -7163.6885 9189.9814 -7163.9082 9190.0947 C
-7163.9395 9190.29 L
-7164.0825 9190.0889 L
-7164.1675 9190.1514 -7164.1758 9190.499 -7164.3945 9190.3115 C
-7164.4058 9190.2354 -7164.4185 9190.1582 -7164.4585 9190.1025 C
-7164.6865 9190.2627 -7165.0073 9190.5342 -7165.2544 9190.3682 C
-7165.4565 9190.083 L
-7165.5625 9190.1143 -7165.7402 9190.2861 -7165.5542 9190.3682 C
-7165.9761 9190.1963 -7166.2476 9190.1748 -7166.3813 9189.9277 C
-7167.1079 9190.5293 -7168.1626 9190.5537 -7169.0073 9190.5107 C
-7168.9819 9190.3643 L
-7169.2095 9190.2275 -7169.1001 9190.6201 -7169.2583 9190.5186 C
-7169.1851 9190.3789 -7169.4312 9190.2148 -7169.2529 9190.0439 C
-7169.5776 9189.8896 -7169.6714 9190.2979 -7169.8823 9190.3643 C
-7169.9146 9190.5566 -7169.7124 9190.2412 -7169.7534 9190.4854 C
-7169.7896 9190.5537 -7170.2026 9190.335 -7170.2529 9190.626 C
-7170.3345 9190.5117 -7170.2715 9190.2979 -7170.2271 9190.1797 C
-7170.4253 9190.3213 L
-7170.6685 9189.9814 -7169.8726 9189.7139 -7170.1274 9189.2949 C
-7170.3101 9189.3398 L
-7170.4849 9189.0361 -7169.8267 9188.9971 -7170.2856 9188.8926 C
-7170.4849 9189.0361 -7170.6548 9189.458 -7170.4775 9189.5869 C
-7170.8921 9189.667 -7170.6694 9190.2803 -7171.1152 9190.2559 C
-7171.2368 9190.085 -7170.7583 9190.2148 -7170.8442 9189.9756 C
-7171.0542 9189.7412 -7171.2651 9190.1064 -7171.4521 9190.0244 C
-7171.2446 9190.1338 -7171.4199 9190.4277 -7171.5542 9190.4814 C
-7171.7808 9190.3438 -7171.4067 9190.2061 -7171.7285 9190.1758 C
-7171.7808 9190.3438 -7172.0762 9190.4697 -7171.8208 9190.5869 C
-7171.9375 9190.9678 -7172.1548 9190.4814 -7172.3296 9190.7764 C
-7172.4341 9190.5078 -7171.9995 9190.1572 -7172.3521 9190.0234 C
-7172.2959 9190.2813 -7172.7871 9190.374 -7172.6006 9190.7559 C
-7172.7388 9190.6826 -7172.7534 9190.4795 -7172.6528 9190.3213 C
-7172.8501 9190.1621 -7173.1318 9190.792 -7173.1968 9190.2803 C
-7173.2646 9190.5439 L
-7173.3267 9190.458 -7173.4155 9190.3926 -7173.5161 9190.251 C
-7173.6899 9190.2461 -7174.0767 9190.6084 -7174.0615 9190.21 C
-7174.1167 9190.251 -7174.5142 9190.2334 -7174.3608 9190.5078 C
-7174.1138 9190.6758 -7174.0767 9190.3076 -7173.9395 9190.6797 C
-7174.1138 9190.376 -7174.2954 9190.7197 -7174.4385 9190.8213 C
-7174.4614 9190.667 L
-7174.5464 9190.7275 -7174.7422 9190.6934 -7174.7954 9190.8604 C
-7174.73 9190.7725 -7174.7642 9190.667 -7174.8315 9190.6299 C
-7174.9209 9190.8643 L
-7175.2661 9190.9814 -7175.0024 9190.4521 -7175.3384 9190.5205 C
-7175.0835 9190.3389 L
-7175.1392 9190.3779 -7175.2534 9190.1582 -7175.4146 9190.2314 C
-7175.4771 9190.4453 -7175.5942 9190.7021 -7175.6479 9190.8682 C
-7175.8374 9190.9619 -7175.7329 9190.627 -7175.9194 9190.8467 C
-7175.6753 9190.5889 L
-7175.6382 9190.5186 -7175.8398 9190.2354 -7176.0928 9190.2412 C
-7176.2544 9190.3154 -7176.5054 9190.624 -7176.2505 9190.7412 C
-7176.3774 9190.7451 -7176.5552 9190.6143 -7176.4546 9190.458 C
-7176.7422 9190.5322 -7176.4165 9190.6885 -7176.6646 9190.8213 C
-7176.7661 9190.6787 -7177.0825 9190.4756 -7177.2729 9190.2686 C
-7177.0142 9189.9102 L
-7177.1865 9189.9063 L
-7176.9634 9189.6201 -7177.2993 9189.6885 -7177.1733 9189.3857 C
-7177.2915 9189.3389 -7177.4336 9189.4414 -7177.5474 9189.5205 C
-7177.2031 9190.0049 -7177.9326 9190.1826 -7177.8325 9190.624 C
-7178.3042 9190.7451 -7178.1274 9189.5498 -7178.6191 9190.2412 C
-7178.5386 9190.3564 -7178.77 9190.6924 -7178.4731 9190.5645 C
-7178.7661 9190.5166 -7178.6724 9191.0078 -7179.0181 9190.8252 C
-7178.7622 9190.6436 -7179.2935 9190.3779 -7178.9233 9190.1143 C
-7178.9478 9190.2598 -7178.7168 9190.2246 -7178.6602 9190.1846 C
-7178.7808 9190.0146 -7178.6353 9189.7393 -7178.9351 9189.7393 C
-7179.1182 9189.7813 -7179.3691 9189.79 -7179.3325 9190.0205 C
-7179.3252 9190.2734 -7179.0532 9189.9932 -7179.1704 9190.249 C
-7179.5352 9190.3369 -7179.5962 9189.9521 -7179.7471 9190.4014 C
-7179.5166 9190.3652 -7179.4595 9190.626 -7179.4634 9190.7998 C
-7179.7314 9190.9053 L
-7179.6792 9190.7373 L
-7180.1089 9190.6162 -7179.8062 9191.042 -7180.2222 9190.9971 C
-7180.4175 9190.665 L
-7180.3184 9190.3789 -7179.8125 9190.792 -7179.8862 9190.3262 C
-7180.1567 9190.3076 -7180.2466 9190.5439 -7180.5015 9190.4238 C
-7180.4448 9190.3838 -7180.3672 9190.3721 -7180.3115 9190.3311 C
-7180.4082 9190.3154 -7180.5044 9189.6982 -7180.8901 9190.0596 C
-7181.0894 9190.2002 -7180.9429 9190.2246 -7180.9478 9190.3994 C
-7181.3823 9190.4521 -7181.5122 9190.6299 -7181.7925 9190.6572 C
-7181.7344 9190.3174 -7182.2866 9190.624 -7181.9775 9190.2764 C
-7181.8354 9190.4756 -7181.2075 9190.4561 -7181.0532 9190.1318 C
-7181.2114 9189.7285 -7180.7119 9190.1885 -7180.6191 9189.7803 C
-7180.9673 9189.7705 -7180.9502 9189.374 -7181.0063 9189.1143 C
-7181.1035 9189.0957 -7181.1968 9189.2061 -7181.2544 9189.2461 C
-7181.2954 9189.4902 -7181.1689 9189.4873 -7181.1616 9189.7393 C
-7181.5503 9189.6729 -7181.9248 9189.8086 -7182.1392 9190.0479 C
-7182.2695 9189.9268 -7182.2285 9189.6826 -7182.0742 9189.6582 C
-7182.5366 9189.7314 -7183.0308 9189.6982 -7183.4702 9189.624 C
-7183.1865 9190.0234 -7183.96 9189.7178 -7183.7661 9190.0498 C
-7183.5308 9190.1396 -7183.3286 9190.4238 -7183.4585 9190.6025 C
-7183.6055 9190.5771 -7183.4536 9190.4277 -7183.5151 9190.3428 C
-7183.7026 9190.5605 -7183.8062 9189.9932 -7183.9902 9190.3369 C
-7183.5679 9190.208 -7183.9082 9189.8506 -7183.8306 9189.5381 C
-7184.1353 9189.7139 -7183.8174 9189.3154 -7184.1191 9189.3154 C
-7184.4224 9189.4893 -7184.7954 9189.626 -7185.1328 9189.6934 C
-7185.5566 9189.3975 -7186.2065 9189.6885 -7186.5854 9189.7002 C
-7186.7832 9189.542 -7186.6489 9189.1885 -7186.8638 9189.127 C
-7187.1162 9189.1338 -7186.6768 9189.5078 -7187.0503 9189.3467 C
-7187.0142 9189.2764 L
-7187.1274 9189.3574 -7187.6992 9189.0361 -7187.8096 9189.5439 C
-7187.6943 9189.1611 L
-7187.7642 9189.126 -7187.8286 9189.2139 -7187.8862 9189.2549 C
-7187.8892 9189.1299 -7187.9702 9189.0166 -7187.8569 9188.9346 C
-7188.0874 9188.6709 -7188.3408 9188.9766 -7188.5913 9188.9873 C
-7188.4302 9189.2139 L
-7188.8589 9189.3916 -7189.1465 9189.167 -7189.5615 9189.2461 C
-7189.5483 9189.0244 L
-7189.7954 9189.1572 L
-7189.7349 9188.9414 -7189.9614 9188.8037 -7190.0918 9188.9834 C
-7189.4502 9188.4404 L
-7189.2725 9188.5713 -7189.6455 9188.708 -7189.5332 9188.9268 C
-7189.4385 9189.1182 -7189.0542 9189.0566 -7188.9922 9188.8438 C
-7189.1392 9188.8193 -7189.1465 9188.8682 -7189.2603 9188.9482 C
-7189.3086 9188.6396 -7189.0854 9188.6514 -7188.9751 9188.4453 C
-7189.0522 9188.458 -7189.1616 9188.3643 -7189.1782 9188.4619 C
-7189.0269 9188.3115 -7188.8745 9188.2881 -7188.6226 9188.2803 C
-7188.7935 9188.4014 -7188.5298 9188.4717 -7188.5942 9188.5596 C
-7188.5742 9188.2881 -7188.3335 9188.2041 -7188.0225 9188.2803 C
-7187.7998 9188.5947 -7187.4375 9188.0781 -7187.0767 9188.165 C
-7187.2231 9188.4404 -7187.4102 9188.6611 -7187.6294 9188.7725 C
-7187.4028 9188.9102 -7187.3774 9188.7646 -7187.1504 9188.9033 C
-7187.0405 9188.6982 -7186.9624 9188.3838 -7186.6675 9188.2588 C
-7186.6509 9188.4619 L
-7186.3833 9188.3574 -7186.3833 9188.0566 -7186.0425 9188.1143 C
-7185.4585 9188.2139 -7184.8574 9188.2139 -7184.4116 9188.2393 C
-7184.3955 9188.4414 L
-7184.1475 9188.0078 -7183.5688 9188.2813 -7183.2349 9188.0889 C
-7182.6675 9188.2842 -7182.0015 9187.8955 -7181.7104 9188.2451 C
-7180.7085 9188.0889 -7179.8315 9187.9365 -7178.7935 9188.0107 C
-7178.9683 9188.3057 L
-7178.7822 9188.0889 -7178.8472 9188.4756 -7178.6646 9188.4316 C
-7178.8745 9188.1963 -7178.4116 9188.126 -7178.2832 9187.9453 C
-7177.8208 9188.1748 -7177.2271 9187.9238 -7176.8174 9187.7178 C
-7176.8013 9187.9209 L
-7176.3872 9187.54 -7175.8926 9187.874 -7175.3765 9187.9365 C
-7175.3174 9188.0205 -7175.2241 9188.2109 -7175.0703 9188.1885 C
-7174.7905 9187.8604 -7174.6445 9187.8838 -7174.2334 9187.6787 C
-7173.9336 9187.6787 -7173.4468 9187.7598 -7173.1421 9187.8877 C
-7172.0142 9187.4268 -7170.8623 9187.7217 -7169.6899 9187.4443 C
-7169.6055 9187.6826 L
-7168.4688 9187.1729 -7167.0708 9187.6357 -7166.1006 9187.374 C
-7166.1943 9187.7813 L
-7165.8901 9187.9063 -7165.5015 9187.6748 -7165.5786 9187.3857 C
-7165.2734 9187.5107 -7164.8174 9187.1885 -7164.6235 9187.5234 C
-7164.3125 9187.5986 -7164.2422 9187.335 -7163.9829 9187.2803 C
-7163.3589 9187.4346 -7163.1274 9187.3994 -7162.5391 9187.3232 C
-7162.6851 9187.2979 L
-7162.7495 9187.3877 -7162.7554 9187.5605 -7162.6089 9187.5869 C
-7162.3892 9187.4727 -7161.8013 9187.6963 -7162.02 9187.21 C
-7161.3921 9187.4902 -7160.5552 9186.9814 -7159.9438 9187.3604 C
-7159.9956 9187.2275 -7159.8413 9187.2021 -7159.7769 9187.1123 C
-7159.2256 9187.1064 -7158.6465 9187.3779 -7158.2065 9187.1514 C
-7158.1191 9187.2178 -7158.3462 9187.3779 -7158.1216 9187.3916 C
-7157.9888 9187.3398 -7158.1191 9187.2178 -7157.9551 9187.1436 C
-7157.0625 9186.8955 -7156.1475 9187.3994 -7155.3354 9187.335 C
-7153.8921 9187.0781 -7152.3862 9187.208 -7151.0034 9187.165 C
-7151.0195 9187.2627 L
-7150.5562 9186.8896 -7149.9326 9187.6445 -7149.5635 9187.083 C
-7149.4536 9187.1758 -7149.1455 9187.127 -7149.2261 9187.3154 C
-7148.8574 9187.0518 -7148.1938 9187.5635 -7147.6606 9187.2285 C
-7147.7095 9187.2197 -7147.7378 9187.2393 -7147.7944 9187.2813 C
-7147.2559 9187.4971 -7146.7808 9187.2021 -7146.2124 9187.3975 C
-7146.27 9187.4395 -7146.3755 9187.4697 -7146.3921 9187.5674 C
-7146.1724 9187.7549 -7145.8716 9187.1553 -7145.7515 9187.626 C
-7145.6255 9187.6221 -7145.6616 9187.3896 -7145.7388 9187.4033 C
-7144.4946 9187.5869 -7143.1665 9187.2861 -7141.8716 9187.1787 C
-7140.9438 9187.46 -7141.8149 9187.9717 -7141.0835 9187.6201 C
-7141.0229 9187.7109 -7141.0396 9187.4404 -7141.0298 9187.5381 C
-7140.7466 9187.4063 -7140.5884 9188.0635 -7140.3921 9187.8174 C
-7140.4731 9187.5283 -7140.2612 9187.6553 -7140.2554 9187.4795 C
-7139.6885 9187.667 -7139.5742 9187.9277 -7139.1265 9187.708 C
-7139.1602 9187.8604 L
-7138.6353 9187.4307 -7138.0269 9187.6611 -7137.5845 9187.165 C
-7134.6895 9187.0742 -7131.9155 9186.7998 -7129.0928 9186.7422 C
-7126.3032 9186.8369 -7123.5718 9186.6143 -7120.7388 9186.8779 C
-7120.0752 9187.2773 -7120.0254 9187.2666 -7119.2964 9187.1045 C
-7119.3262 9187.1689 -7119.3716 9187.1846 -7119.3228 9187.2451 C
-7119.2866 9186.917 -7118.8096 9187.2139 -7118.7402 9186.9014 C
-7117.6929 9186.9619 -7116.7285 9186.8721 -7115.6504 9186.8701 C
-7115.8208 9186.9053 -7115.9063 9187.1729 -7115.7036 9187.1514 C
-7115.4922 9186.9414 L
-7115.4575 9187.0342 L
-7115.3188 9186.9854 -7115.1685 9186.8232 -7115.3115 9186.7178 C
-7112.6045 9186.4346 -7109.9409 9187.0918 -7107.2896 9187.0117 C
-7106.6606 9187.1484 -7105.7642 9187.0234 -7105.0796 9186.9561 C
-7103.0522 9187.3926 -7101.2251 9187.7461 -7099.1646 9187.4404 C
-7099.4341 9188.2881 -7100.2842 9188.4834 V
f
-7190.3745 9188.2842 m
-7190.3022 9188.4482 -7190.0664 9188.5381 -7190.2544 9188.7559 C
-7190.2778 9188.6025 -7190.3989 9188.4307 -7190.3745 9188.2842 C
f
-7184.0786 9189.9717 m
-7184.0703 9189.9229 -7183.9888 9190.0381 -7183.9688 9190.0645 C
-7184.0464 9190.0771 -7184.1191 9190.2148 -7184.1812 9190.1299 C
-7184.1021 9190.1182 -7184.1143 9190.04 -7184.0786 9189.9717 C
f
-7182.4688 9190.0693 m
-7182.4932 9190.2148 -7182.8374 9190.3311 -7183.0405 9190.3486 C
-7182.4688 9190.0693 L
f
-7180.9688 9190.6709 m
-7180.8394 9190.7939 -7180.8755 9190.8613 -7181.0493 9190.8574 C
-7181.0625 9190.7803 -7181.0044 9190.7412 -7180.9688 9190.6709 C
f
-7180.8623 9190.3389 m
-7180.7378 9190.335 -7180.6758 9190.4209 -7180.6152 9190.5049 C
-7180.6196 9190.3789 -7180.9038 9190.583 -7180.8623 9190.3389 C
f
-7177.6064 9190.7627 m
-7177.5278 9190.751 -7177.3584 9190.6299 -7177.2856 9190.792 C
-7177.3672 9190.6787 -7177.6665 9190.9766 -7177.6064 9190.7627 C
f
-7176.0928 9190.542 m
-7176.0439 9190.5518 -7176.0239 9190.5781 -7175.9673 9190.5381 C
-7175.8774 9190.6045 -7175.9722 9190.7109 -7176.0479 9190.7246 C
-7176.0928 9190.542 L
f
-7148.5454 9189.9561 m
-7148.7095 9190.0283 L
-7148.6851 9189.8838 L
-7148.5454 9189.9561 L
f
-7136.4741 9189.9482 m
-7136.3115 9189.8564 -7136.3608 9190.085 -7136.3335 9190.1064 C
-7136.4814 9190.1221 -7136.2788 9189.9268 -7136.4741 9189.9482 C
f
-7129.9653 9189.2197 m
-7130.0151 9189.2236 L
-7129.9985 9188.9238 L
-7129.9653 9189.2197 L
f
U
%AI8_EndBrushPattern
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_BeginPluginObject
(Adobe Brush Manager Order)
(Adobe Brush Manager Order)
( Adobe Calligraphic Brush Tool/ 5 pt. Flat/ Adobe ArtOnPath Br) -
(ush Tool/ Charcoal/ Adobe ArtOnPath Brush Tool/ Charcoal copy/) .
%AI8_EndPluginObject
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_BeginPluginObject
(Adobe Calligraphic Brush Tool)
(5 pt. Flat)
(1 5 5 0 0 90 90 0 0 0 0) .
%AI8_EndPluginObject
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI8_BeginPluginObject
(Adobe ArtOnPath Brush Tool)
(Charcoal)
(1 / Unnamed Brush Pat/ / / / / 5 0.137255 0.121569 0.12549 /  ) -
(1 1 1.2 0 1 0 0 0) .
%AI8_EndPluginObject
%AI8_BeginPluginObject
(Adobe ArtOnPath Brush Tool)
(Charcoal copy)
(1 / Unnamed Brush Pat 2/ / / / / 0 0 /  1 1 1.2 0 1 0 0 0) .
%AI8_EndPluginObject
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 0 Pb
0.74902 0.678431 0.670588 0.901961 ([Registration]) 0 Xs
([Registration])
Pc
0.74902 0.678431 0.670588 0.901961 0 0 0 Xa
(Black)
Pc
0 0 0 0 1 1 1 Xa
(White)
Pc
0.698039 0.67451 0.639216 0.741176 0.137255 0.121569 0.12549 (R=35 G=31 B=32) 0 1 Xk
(R=35 G=31 B=32)
Pc
0.709804 0.360784 0 0 0 0.588235 1 (R=0 G=150 B=255) 0 1 Xk
(R=0 G=150 B=255)
Pc
0.035294 0.137255 0.792157 0 0.968627 0.831373 0.32549 (R=247 G=212 B=83) 0 1 Xk
(R=247 G=212 B=83)
Pc
0.003922 0.505882 0.968627 0 0.964706 0.572549 0.141176 (R=246 G=146 B=36) 0 1 Xk
(R=246 G=146 B=36)
Pc
0.592157 0.043137 1 0 0.462745 0.721569 0.247059 (R=118 G=184 B=63) 0 1 Xk
(R=118 G=184 B=63)
Pc
0.52549 0.333333 0.043137 0 0.490196 0.6 0.780392 (R=125 G=153 B=199) 0 1 Xk
(R=125 G=153 B=199)
Pc
0.12549 0.098039 0.101961 0 0.858824 0.858824 0.858824 (R=219 G=219 B=219) 0 1 Xk
(R=219 G=219 B=219)
Pc
0.058824 0.039216 0.043137 0 0.929412 0.929412 0.929412 (R=237 G=237 B=237) 0 1 Xk
(R=237 G=237 B=237)
Pc
0.435294 0.117647 0.968627 0 0.619608 0.721569 0.247059 (R=158 G=184 B=63) 0 1 Xk
(R=158 G=184 B=63)
Pc
0.113725 0.458824 0.760784 0 0.870588 0.588235 0.329412 (R=222 G=150 B=84) 0 1 Xk
(R=222 G=150 B=84)
Pc
0 0.729412 0.964706 0 0.964706 0.411765 0.141176 (R=246 G=105 B=36) 0 1 Xk
(R=246 G=105 B=36)
Pc
0.815686 0.164706 0.505882 0.007843 0 0.611765 0.560784 (R=0 G=156 B=143) 0 1 Xk
(R=0 G=156 B=143)
Pc
0.164706 0.078431 0.772549 0 0.858824 0.831373 0.368627 (R=219 G=212 B=94) 0 1 Xk
(R=219 G=212 B=94)
Pc
0.023529 0.756863 0.988235 0 0.92549 0.388235 0.141176 (R=236 G=99 B=36) 0 1 Xk
(R=236 G=99 B=36)
Pc
0.219608 0.423529 1 0.023529 0.780392 0.572549 0.141176 (R=199 G=146 B=36) 0 1 Xk
(R=199 G=146 B=36)
Pc
0.023529 0.352941 0.972549 0 0.964706 0.678431 0.141176 (R=246 G=173 B=36) 0 1 Xk
(R=246 G=173 B=36)
Pc
0.411765 0.411765 0 0 0.631373 0.588235 1 (R=161 G=150 B=255) 0 1 Xk
(R=161 G=150 B=255)
Pc
0 0.501961 0.741176 0 0.968627 0.580392 0.32549 (R=247 G=148 B=83) 0 1 Xk
(R=247 G=148 B=83)
Pc
0.756863 0.219608 0.505882 0.023529 0.231373 0.588235 0.541176 (R=59 G=150 B=138) 0 1 Xk
(R=59 G=150 B=138)
Pc
0.333333 0.415686 0 0 0.729412 0.588235 1 (R=186 G=150 B=255) 0 1 Xk
(R=186 G=150 B=255)
Pc
0.129412 0.792157 0.913725 0.023529 0.819608 0.341176 0.2 (R=209 G=87 B=51) 0 1 Xk
(R=209 G=87 B=51)
Pc
0 0.917647 0.827451 0 1 0.2 0.2 (R=255 G=51 B=51) 0 1 Xk
(R=255 G=51 B=51)
Pc
0.501961 0 0 0 0.427451 0.811765 0.964706 (R=109 G=207 B=246) 0 1 Xk
(R=109 G=207 B=246)
Pc
0 0.917647 0.392157 0 1 0.2 0.411765 (R=255 G=51 B=105) 0 1 Xk
(R=255 G=51 B=105)
Pc
0.035294 0.035294 0.996078 0 0.988235 0.901961 0 (R=252 G=230 B=0) 0 1 Xk
(R=252 G=230 B=0)
Pc
0.058824 0.686274 0.258824 0 0.898039 0.45098 0.54902 (R=229 G=115 B=140) 0 1 Xk
(R=229 G=115 B=140)
Pc
0.035294 0.996078 0.003922 0 0.898039 0.003922 0.54902 (R=229 G=1 B=140) 0 1 Xk
(R=229 G=1 B=140)
Pc
0.015686 0.752941 0.211765 0 0.92549 0.4 0.54902 (R=236 G=102 B=140) 0 1 Xk
(R=236 G=102 B=140)
Pc
0.019608 0.737255 0.239216 0 0.92549 0.411765 0.541176 (R=236 G=105 B=138) 0 1 Xk
(R=236 G=105 B=138)
Pc
0.007843 0.988235 0.003922 0 0.92549 0 0.54902 (R=236 G=0 B=140) 0 1 Xk
(R=236 G=0 B=140)
Pc
0.4 0.164706 0.388235 0 0.619608 0.721569 0.639216 (R=158 G=184 B=163) 0 1 Xk
(R=158 G=184 B=163)
Pc
0.003922 0.992157 0.972549 0 0.929412 0.109804 0.141176 (R=237 G=28 B=36) 0 1 Xk
(R=237 G=28 B=36)
Pc
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 1 0 79 128 255 0 50 Lb
(Layer 1) Ln
0 A
1 Ap
0 O
0.047059 0.035294 0.035294 0 0.929412 0.929412 0.929412 (R=237 G=237 B=237) 0.1 1 Xk
0 J 0 j 1 w 4 M []0 d0 XR
1800 350 m
200 350 L
200 1650 L
1800 1650 L
1800 350 L
f
1371.082 549.8467 m
1371.082 506.9805 1206.9736 472.2314 1004.542 472.2314 c
802.1055 472.2314 637.9995 506.9805 637.9995 549.8467 c
637.9995 592.7129 802.1055 627.4609 1004.542 627.4609 c
1206.9736 627.4609 1371.082 592.7129 1371.082 549.8467 c
Bb
0 0 0 0 Bh
1 (Unnamed gradient 52) 1022.1064 1910.3477 0 524.7292 0.6986 0 0 0.1479 2457.8645 7564.3452 Bg
366.5758 0 0 -77.6075 1004.541 549.8467 Bm
f
0 BB
0 Ap
0 0.917647 0.827451 0 1 0.2 0.2 (R=255 G=51 B=51) 0 1 Xk
882.7183 952.6143 m
887.5698 939.3584 882.7183 929.3398 v
879.3833 922.4502 900.708 952.6143 y
939.1118 952.6143 L
949.1572 952.6143 957.3037 959.126 957.3037 967.1592 C
957.3037 1035.043 L
957.3037 1043.0776 949.1572 1049.5908 939.1118 1049.5908 C
854.2192 1049.5908 L
844.1719 1049.5908 836.0278 1043.0776 836.0278 1035.043 C
836.0278 967.1592 L
836.0278 959.126 844.1719 952.6143 854.2192 952.6143 C
882.7183 952.6143 L
f
0.003922 0.992157 0.972549 0 0.929412 0.109804 0.141176 (R=237 G=28 B=36) 0 1 Xk
1091.25 958.9971 m
1068.2783 966.8008 1052.998 980.6445 1052.998 996.4238 c
1052.998 1020.7969 1089.4473 1040.5518 1134.4102 1040.5518 c
1179.3711 1040.5518 1215.8203 1020.7969 1215.8203 996.4238 c
1215.8203 972.0508 1179.3711 952.293 1134.4102 952.293 c
1127 952.293 1119.8193 952.8311 1112.9951 953.8359 C
1089.6484 926.4463 1094.085 933.3574 v
1102.3486 946.2402 1091.25 958.9971 Y
f
u
1 Ap
0.501961 0 0 0 0.427451 0.811765 0.964706 (R=109 G=207 B=246) 0 1 Xk
1083.4355 978.9199 m
1083.4355 958.2559 1053.6523 941.5068 1016.918 941.5068 c
980.1836 941.5068 950.4033 958.2559 950.4033 978.9199 c
950.4033 999.584 980.1836 1016.335 1016.918 1016.335 c
1053.6523 1016.335 1083.4355 999.584 1083.4355 978.9199 c
f
1023.2734 941.9561 m
1023.2734 939.4512 1020.4287 937.416 1016.9199 937.416 c
1013.4082 937.416 1010.5635 939.4512 1010.5635 941.9561 c
1010.5635 944.4668 1013.4082 946.4961 1016.9199 946.4961 c
1020.4287 946.4961 1023.2734 944.4668 1023.2734 941.9561 c
f
1021.4941 932.3477 m
1021.4941 930.543 1019.4453 929.0781 1016.915 929.0781 c
1014.3887 929.0781 1012.3418 930.543 1012.3418 932.3477 c
1012.3418 934.1523 1014.3887 935.6182 1016.915 935.6182 c
1019.4453 935.6182 1021.4941 934.1523 1021.4941 932.3477 c
f
1020.3086 924.1045 m
1020.3086 922.7637 1018.791 921.6816 1016.918 921.6816 c
1015.0459 921.6816 1013.5273 922.7637 1013.5273 924.1045 c
1013.5273 925.4385 1015.0459 926.5254 1016.918 926.5254 c
1018.791 926.5254 1020.3086 925.4385 1020.3086 924.1045 c
f
1019.6299 916.1816 m
1019.6299 915.1113 1018.415 914.2432 1016.915 914.2432 c
1015.418 914.2432 1014.2051 915.1113 1014.2051 916.1816 c
1014.2051 917.2529 1015.418 918.1191 1016.915 918.1191 c
1018.415 918.1191 1019.6299 917.2529 1019.6299 916.1816 c
f
U
0 Ap
0.129412 0.792157 0.913725 0.023529 0.819608 0.341176 0.2 (R=209 G=87 B=51) 0 1 Xk
950.4033 978.9199 m
950.4033 973.2891 952.6279 967.9521 956.5908 963.1611 C
957.0459 964.4326 957.3037 965.7715 957.3037 967.1592 C
957.3037 995.5137 L
952.8945 990.5127 950.4033 984.8818 950.4033 978.9199 c
f
1056.3896 1009.0322 m
1054.1934 1005.0361 1052.998 1000.8086 1052.998 996.4238 c
1052.998 983.8496 1062.708 972.5088 1078.2734 964.4707 C
1081.5879 968.916 1083.4355 973.7959 1083.4355 978.9199 c
1083.4355 991.2695 1072.792 1002.2188 1056.3896 1009.0322 C
f
0.592157 0.043137 1 0 0.462745 0.721569 0.247059 (R=118 G=184 B=63) 0 1 Xk
911.1069 1005.2617 m
923.4189 986.7891 906.3174 995.9824 914.4243 971.1836 c
924.7739 939.5234 888.9775 920.2139 900.1987 925.6641 c
931.5117 940.873 935.9277 961.6426 933.4365 969.5527 c
927.9507 986.9746 938.0459 990.0117 938.9937 997.6006 C
957.0137 983.0576 981.6689 984.957 v
1009.1777 987.0703 1008.2217 1006.7656 y
1032.3223 1003.7734 1049.9482 1014.3516 v
1067.5713 1024.9307 1057.5342 1049.4399 y
1080.2939 1049.4399 1076.502 1080.7349 v
1074.6504 1095.9995 1047.1025 1096.8564 y
1059.2822 1128.8188 1041.4131 1137.6333 v
1026.0879 1145.1963 1006.3252 1133.8403 y
998.2471 1153.5781 976.0254 1152.0449 v
953.8037 1150.5142 948.2295 1134.877 y
935.894 1149.749 909.917 1143.3047 v
883.5986 1136.7778 883.0967 1122.6167 y
855.1147 1128.8506 840.9521 1118.7852 v
825.3374 1107.6875 830.2251 1085.8354 y
817.7017 1085.7695 816.2388 1067.0474 v
814.2266 1041.3198 831.7593 1039.0942 y
828.4321 1019.8809 839.4199 1011.5078 v
859.335 996.335 872.6113 1006.7656 y
875.1284 993.5293 891.5786 991.5938 v
907.7007 989.6963 911.1069 1005.2617 Y
f
1767.2969 1319.6348 m
1768.4326 1384.1055 1664.8457 1438.21 1535.9199 1440.4819 c
1406.9951 1442.7539 1301.5625 1392.3306 1300.4287 1327.8618 c
1299.292 1263.3906 1402.8818 1209.2871 1531.8047 1207.0146 c
1583.7344 1206.1011 1631.8418 1213.7363 1670.8691 1227.3979 C
1686.8076 1158.5791 1622.3086 1080.2891 Y
1734.6348 1191.7793 1706.1592 1242.6958 V
1743.6748 1262.7153 1766.7695 1289.6519 1767.2969 1319.6348 c
f
u
u
1 Ap
0.709804 0.360784 0 0 0 0.588235 1 (R=0 G=150 B=255) 0 1 Xk
361.7012 1224.8906 m
361.7012 1217.998 353.8779 1212.4023 344.2261 1212.4023 c
334.5679 1212.4023 326.7417 1217.998 326.7417 1224.8906 c
326.7417 1231.791 334.5679 1237.377 344.2261 1237.377 c
353.8779 1237.377 361.7012 1231.791 361.7012 1224.8906 c
f
697.5249 1319.0981 m
697.5249 1250.9077 599.2534 1195.6294 478.0283 1195.6294 c
356.8013 1195.6294 258.5288 1250.9077 258.5288 1319.0981 c
258.5288 1387.2876 356.8013 1442.5659 478.0283 1442.5659 c
599.2534 1442.5659 697.5249 1387.2876 697.5249 1319.0981 c
f
332.978 1186.8828 m
332.978 1181.4277 326.7773 1176.9946 319.1299 1176.9946 c
311.4829 1176.9946 305.2866 1181.4277 305.2866 1186.8828 c
305.2866 1192.3452 311.4829 1196.7725 319.1299 1196.7725 c
326.7773 1196.7725 332.978 1192.3452 332.978 1186.8828 c
f
304.3511 1153.3755 m
304.3511 1148.9575 299.3389 1145.3809 293.1592 1145.3809 c
286.981 1145.3809 281.9668 1148.9575 281.9668 1153.3755 c
281.9668 1157.7881 286.981 1161.3647 293.1592 1161.3647 c
299.3389 1161.3647 304.3511 1157.7881 304.3511 1153.3755 c
f
278.4302 1122.4585 m
278.4302 1118.9243 274.4189 1116.0635 269.4756 1116.0635 c
264.5342 1116.0635 260.5273 1118.9243 260.5273 1122.4585 c
260.5273 1125.9927 264.5342 1128.8501 269.4756 1128.8501 c
274.4189 1128.8501 278.4302 1125.9927 278.4302 1122.4585 c
f
U
U
u
0.52549 0.333333 0.043137 0 0.490196 0.6 0.780392 (R=125 G=153 B=199) 0 1 Xk
735.4106 950.8848 m
735.4106 948.2119 732.3779 946.0449 728.6348 946.0449 c
724.8901 946.0449 721.8579 948.2119 721.8579 950.8848 c
721.8579 953.5605 724.8901 955.7246 728.6348 955.7246 c
732.3779 955.7246 735.4106 953.5605 735.4106 950.8848 c
f
723.7876 937.4678 m
723.7876 935.5469 721.6016 933.9854 718.9058 933.9854 c
716.2119 933.9854 714.0298 935.5469 714.0298 937.4678 c
714.0298 939.3945 716.2119 940.958 718.9058 940.958 c
721.6016 940.958 723.7876 939.3945 723.7876 937.4678 c
f
713.1777 922.7959 m
713.1777 921.082 711.2344 919.6914 708.8379 919.6914 c
706.4438 919.6914 704.5005 921.082 704.5005 922.7959 c
704.5005 924.5039 706.4438 925.8896 708.8379 925.8896 c
711.2344 925.8896 713.1777 924.5039 713.1777 922.7959 c
f
703.1284 911.1748 m
703.1284 909.8066 701.5732 908.6982 699.6582 908.6982 c
697.7427 908.6982 696.189 909.8066 696.189 911.1748 c
696.189 912.5439 697.7427 913.6523 699.6582 913.6523 c
701.5732 913.6523 703.1284 912.5439 703.1284 911.1748 c
f
0 Ap
708.9219 1030.751 m
710.3472 1031.9131 711.8418 1032.9121 713.376 1033.7607 C
713.1089 1035.082 712.9648 1036.439 712.9648 1037.8232 c
712.9648 1051.6138 726.7256 1062.7949 743.6997 1062.7949 c
748.0142 1062.7949 752.1191 1062.0679 755.8452 1060.7656 C
759.6279 1074.9355 775.7578 1084.7622 794.1938 1083.314 c
810.1172 1082.0635 823.0273 1072.7754 827.2363 1060.8687 C
828.3418 1061.1831 829.5029 1061.436 830.7383 1061.605 c
843.8564 1063.4077 856.7271 1053.0083 859.709 1036.9897 c
861.8198 1025.6738 858.3765 1014.8965 851.5874 1008.6836 C
859.5776 997.502 854.96 980.4492 841.2373 970.5342 c
830.8486 963.0273 818.2129 961.7686 809.1704 966.4121 C
804.3032 958.127 794.0254 952.2852 782.0039 952.0195 c
770.6348 951.7666 760.605 956.5674 755.1245 963.9063 C
747.2451 958.9941 735.9482 958.2813 725.3613 962.916 c
710.5933 969.3828 702.5381 983.9219 706.5029 996.1895 C
704.999 997.1348 703.6411 998.3135 702.4849 999.7314 c
695.5142 1008.2852 698.3965 1022.1709 708.9219 1030.751 c
f
U
0.443137 0.27451 0.039216 0 0.490196 0.6 0.780392 (R=125 G=153 B=199) 0.14 1 Xk
836.0278 1035.043 m
836.0278 967.3906 L
837.8052 968.2813 839.5532 969.3164 841.2373 970.5342 c
854.96 980.4492 859.5776 997.502 851.5874 1008.6836 C
858.3765 1014.8965 861.8198 1025.6738 859.709 1036.9897 c
858.8237 1041.7495 857.0488 1045.9966 854.6694 1049.5908 C
854.2192 1049.5908 L
844.1719 1049.5908 836.0278 1043.0776 836.0278 1035.043 C
f
0.4 0.164706 0.388235 0 0.619608 0.721569 0.639216 (R=158 G=184 B=163) 0 1 Xk
859.709 1036.9897 m
856.7271 1053.0083 843.8564 1063.4077 830.7383 1061.605 c
829.5029 1061.436 828.3418 1061.1831 827.2363 1060.8687 C
825.4443 1065.9385 822.063 1070.5249 817.5552 1074.2266 C
816.9248 1072.2036 816.457 1069.8369 816.2388 1067.0474 c
814.2266 1041.3198 831.7593 1039.0942 Y
828.4321 1019.8809 839.4199 1011.5078 v
844.832 1007.3848 849.748 1005.1631 854.0464 1004.0977 C
853.4282 1005.7041 852.6162 1007.2441 851.5874 1008.6836 C
858.3765 1014.8965 861.8198 1025.6738 859.709 1036.9897 c
f
0.501961 0 0 0 0.427451 0.811765 0.964706 (R=109 G=207 B=246) 0 1 Xk
1178.1748 1034.0801 m
1193.7666 1043.897 1206.8057 1026.6953 y
1206.7832 1036.5986 1214.3135 1039.4004 v
1220.6689 1041.7646 1230.4834 1032.4707 y
1227.0518 1051.0801 1244.96 1049.9985 v
1267.29 1048.6494 1258.7813 1031.8936 y
1261.4766 1040.5557 1269.1758 1040.5557 v
1277.6494 1040.5557 1279.0186 1031.3379 y
1321.9717 1051.1157 1332.7314 1012.627 v
1339.8965 986.9873 1297.1406 976.6191 y
1302.9541 957.9707 1288.498 950.2578 v
1265.4277 937.9492 1253.2881 951.7861 Y
1255.0215 943.123 L
1262.5293 940.8125 L
1260.7959 915.9814 L
1244.0488 946.0117 l
1238.2744 941.3906 L
1206.8965 968.9189 l
1193.4814 954.9492 1183.0244 963.1436 v
1172.3408 971.5176 1180.332 983.1631 y
1164.1553 983.5078 1164.1611 996.2539 v
1164.166 1005.625 1176.4814 1010.8848 Y
1164.1738 1025.2617 1178.1748 1034.0801 v
f
0.129412 0.792157 0.913725 0.023529 0.819608 0.341176 0.2 (R=209 G=87 B=51) 0 1 Xk
1215.8203 996.4238 m
1215.8203 1012.1621 1200.6084 1025.9668 1177.7324 1033.7793 C
1164.4639 1024.9395 1176.4814 1010.8848 Y
1164.166 1005.625 1164.1611 996.2539 v
1164.1553 983.5078 1180.332 983.1631 Y
1172.3408 971.5176 1183.0244 963.1436 v
1183.6748 962.6328 1184.3369 962.2109 1185.0059 961.8633 C
1203.7725 969.9473 1215.8203 982.4199 1215.8203 996.4238 c
f
0.035294 0.137255 0.792157 0 0.968627 0.831373 0.32549 (R=247 G=212 B=83) 0 1 Xk
1234.4277 1014.5059 m
1273.1924 1027.6719 1298.9746 1051.0361 1298.9746 1077.6606 c
1298.9746 1118.7896 1237.4678 1152.1304 1161.5938 1152.1304 c
1085.7217 1152.1304 1024.2158 1118.7896 1024.2158 1077.6606 c
1024.2158 1036.5332 1085.7217 1003.1914 1161.5938 1003.1914 c
1174.0996 1003.1914 1186.2178 1004.0977 1197.7334 1005.7988 C
1241.0596 952.4492 1248.0566 903.4756 v
1250.7236 884.8164 1234.4277 1014.5059 Y
f
0.435294 0.117647 0.968627 0 0.619608 0.721569 0.247059 (R=158 G=184 B=63) 0 1 Xk
1024.2158 1077.6606 m
1024.2158 1058.458 1037.627 1040.9541 1059.6455 1027.7471 C
1062.1025 1038.2637 1057.5342 1049.4399 Y
1080.2939 1049.4399 1076.502 1080.7349 v
1074.6504 1095.9995 1047.1025 1096.8564 Y
1052.1201 1110.0498 1050.9756 1121.8213 V
1034.1611 1109.4653 1024.2158 1094.1938 1024.2158 1077.6606 c
f
0.592157 0.043137 1 0 0.462745 0.721569 0.247059 (R=118 G=184 B=63) 0 1 Xk
459.0459 1107.2905 m
467.1729 1084.8882 459.0459 1067.9507 v
453.459 1056.3052 489.1812 1107.2905 y
553.5171 1107.2905 L
570.3457 1107.2905 583.9907 1118.3003 583.9907 1131.8804 C
583.9907 1246.6245 L
583.9907 1260.2056 570.3457 1271.2134 553.5171 1271.2134 C
411.3027 1271.2134 L
394.4722 1271.2134 380.8286 1260.2056 380.8286 1246.6245 C
380.8286 1131.8804 L
380.8286 1118.3003 394.4722 1107.2905 411.3027 1107.2905 C
459.0459 1107.2905 L
f
0.815686 0.164706 0.505882 0.007843 0 0.611765 0.560784 (R=0 G=156 B=143) 0 1 Xk
553.5171 1271.2134 m
411.3027 1271.2134 L
394.4722 1271.2134 380.8286 1260.2056 380.8286 1246.6245 C
380.8286 1208.394 L
410.1313 1200.2339 443.1162 1195.6294 478.0283 1195.6294 c
516.4575 1195.6294 552.5737 1201.1904 583.9907 1210.9512 C
583.9907 1246.6245 L
583.9907 1260.2056 570.3457 1271.2134 553.5171 1271.2134 C
f
u
1 Ap
0.035294 0.035294 0.996078 0 0.988235 0.901961 0 (R=252 G=230 B=0) 0 1 Xk
852.6367 1081.9775 m
852.6367 1043.2329 796.7949 1011.8252 727.9185 1011.8252 c
659.0396 1011.8252 603.2031 1043.2329 603.2031 1081.9775 c
603.2031 1120.7217 659.0396 1152.1304 727.9185 1152.1304 c
796.7949 1152.1304 852.6367 1120.7217 852.6367 1081.9775 c
f
739.8359 1012.6699 m
739.8359 1007.9727 734.5015 1004.1563 727.9204 1004.1563 c
721.3379 1004.1563 716 1007.9727 716 1012.6699 c
716 1017.375 721.3379 1021.1836 727.9204 1021.1836 c
734.5015 1021.1836 739.8359 1017.375 739.8359 1012.6699 c
f
736.5 994.6523 m
736.5 991.2715 732.6558 988.5234 727.9146 988.5234 c
723.1738 988.5234 719.3379 991.2715 719.3379 994.6523 c
719.3379 998.0391 723.1738 1000.7842 727.9146 1000.7842 c
732.6558 1000.7842 736.5 998.0391 736.5 994.6523 c
f
734.2759 979.1973 m
734.2759 976.6855 731.4292 974.6553 727.9185 974.6553 c
724.4087 974.6553 721.5586 976.6855 721.5586 979.1973 c
721.5586 981.7021 724.4087 983.7363 727.9185 983.7363 c
731.4292 983.7363 734.2759 981.7021 734.2759 979.1973 c
f
733.0034 964.3398 m
733.0034 962.332 730.7251 960.709 727.9146 960.709 c
725.1055 960.709 722.8311 962.332 722.8311 964.3398 c
722.8311 966.3516 725.1055 967.9756 727.9146 967.9756 c
730.7251 967.9756 733.0034 966.3516 733.0034 964.3398 c
f
U
0 Ap
0.435294 0.117647 0.968627 0 0.619608 0.721569 0.247059 (R=158 G=184 B=63) 0 1 Xk
837.333 1115.6606 m
826.1602 1104.0454 830.2251 1085.8354 Y
817.7017 1085.7695 816.2388 1067.0474 v
814.8208 1048.9199 823.1021 1042.4663 828.1201 1040.2324 C
843.5117 1051.8965 852.6367 1066.334 852.6367 1081.9775 c
852.6367 1094.1855 847.0825 1105.6621 837.333 1115.6606 C
f
*u
1 D
0.164706 0.078431 0.772549 0 0.858824 0.831373 0.368627 (R=219 G=212 B=94) 0 1 Xk
727.9146 1000.7842 m
723.1738 1000.7842 719.3379 998.0391 719.3379 994.6523 c
719.3379 991.2715 723.1738 988.5234 727.9146 988.5234 c
732.6558 988.5234 736.5 991.2715 736.5 994.6523 c
736.5 998.0391 732.6558 1000.7842 727.9146 1000.7842 c
f
727.9185 983.7363 m
724.4087 983.7363 721.5586 981.7021 721.5586 979.1973 c
721.5586 976.6855 724.4087 974.6553 727.9185 974.6553 c
731.4292 974.6553 734.2759 976.6855 734.2759 979.1973 c
734.2759 981.7021 731.4292 983.7363 727.9185 983.7363 c
f
727.9146 967.9756 m
725.1055 967.9756 722.8311 966.3516 722.8311 964.3398 c
722.8311 964.2686 722.8555 964.2012 722.8613 964.1299 C
723.6729 963.7012 724.5039 963.292 725.3613 962.916 c
727.0024 962.1982 728.6592 961.623 730.3188 961.1582 C
731.9106 961.7715 733.0034 962.958 733.0034 964.3398 c
733.0034 966.3516 730.7251 967.9756 727.9146 967.9756 c
f
830.7383 1061.605 m
829.5029 1061.436 828.3418 1061.1831 827.2363 1060.8687 C
823.0273 1072.7754 810.1172 1082.0635 794.1938 1083.314 c
775.7578 1084.7622 759.6279 1074.9355 755.8452 1060.7656 C
752.1191 1062.0679 748.0142 1062.7949 743.6997 1062.7949 c
726.7256 1062.7949 712.9648 1051.6138 712.9648 1037.8232 c
712.9648 1036.439 713.1089 1035.082 713.376 1033.7607 C
711.8418 1032.9121 710.3472 1031.9131 708.9219 1030.751 c
703.1943 1026.082 699.752 1019.8438 698.9072 1013.748 C
704.4819 1013 710.2002 1012.46 716.0371 1012.1494 C
716.4165 1007.6953 721.5835 1004.1563 727.9204 1004.1563 c
734.2554 1004.1563 739.4209 1007.6953 739.7988 1012.1494 C
788.8018 1014.7559 829.5332 1033.3105 845.4443 1058.4844 C
840.9629 1061.1245 835.874 1062.311 830.7383 1061.605 c
f
*U
0 D
0.007843 0.988235 0.003922 0 0.92549 0 0.54902 (R=236 G=0 B=140) 0 1 Xk
571.0601 1102.2021 m
523.4507 1118.3691 491.79 1147.063 491.79 1179.7598 c
491.79 1230.2686 567.3242 1271.2134 660.502 1271.2134 c
753.6797 1271.2134 829.2144 1230.2686 829.2144 1179.7598 c
829.2144 1129.2524 753.6797 1088.3057 660.502 1088.3057 c
645.1431 1088.3057 630.2637 1089.4199 616.1191 1091.5088 C
562.9131 1025.9932 554.3208 965.8516 v
551.0459 942.9316 571.0601 1102.2021 Y
f
0.019608 0.737255 0.239216 0 0.92549 0.411765 0.541176 (R=236 G=105 B=138) 0 1 Xk
808.2764 1135.6104 m
786.5698 1145.9121 758.541 1152.1304 727.9185 1152.1304 c
659.0396 1152.1304 603.2031 1120.7217 603.2031 1081.9775 c
603.2031 1079.5991 603.4243 1077.25 603.835 1074.9321 C
611.0698 1085.2896 616.1191 1091.5088 Y
630.2637 1089.4199 645.1431 1088.3057 660.502 1088.3057 c
724.1401 1088.3057 779.5415 1107.4087 808.2764 1135.6104 C
f
0.015686 0.752941 0.211765 0 0.92549 0.4 0.54902 (R=236 G=102 B=140) 0 1 Xk
491.79 1179.7598 m
491.79 1150.3647 517.3877 1124.2114 557.1479 1107.4805 C
572.2622 1108.9321 583.9907 1119.2935 583.9907 1131.8804 C
583.9907 1246.6245 L
583.9907 1251.5161 582.1992 1256.0625 579.1479 1259.8921 C
527.0713 1244.3237 491.79 1214.2778 491.79 1179.7598 c
f
0.035294 0.996078 0.003922 0 0.898039 0.003922 0.54902 (R=229 G=1 B=140) 0 1 Xk
1463.251 1016.208 m
1501.5381 1029.208 1527.0029 1052.2837 1527.0029 1078.5806 c
1527.0029 1119.2026 1466.2549 1152.1304 1391.3193 1152.1304 c
1316.3809 1152.1304 1255.6338 1119.2026 1255.6338 1078.5806 c
1255.6338 1037.9629 1316.3809 1005.0293 1391.3193 1005.0293 c
1403.6709 1005.0293 1415.6377 1005.9268 1427.0117 1007.6055 C
1465.9199 961.9531 1458.5254 973.4766 v
1444.751 994.9453 1463.251 1016.208 Y
f
0.058824 0.686274 0.258824 0 0.898039 0.45098 0.54902 (R=229 G=115 B=140) 0 1 Xk
1255.6338 1078.5806 m
1255.6338 1063.6313 1263.8701 1049.7266 1278.0068 1038.1177 C
1291.2822 1049.5776 1298.9746 1063.1304 1298.9746 1077.6606 c
1298.9746 1092.5884 1290.8672 1106.4883 1276.915 1118.1421 C
1263.4434 1106.7183 1255.6338 1093.144 1255.6338 1078.5806 c
f
0.035294 0.035294 0.996078 0 0.988235 0.901961 0 (R=252 G=230 B=0) 0 1 Xk
1677.3994 1189.48 m
1678.1631 1232.8735 1600.002 1269.439 1502.8184 1271.1509 c
1405.6338 1272.8643 1326.2334 1239.0737 1325.4688 1195.6812 c
1324.7031 1152.2876 1402.8652 1115.7222 1500.0479 1114.0103 c
1539.1943 1113.3208 1575.4463 1118.3916 1604.8447 1127.5313 C
1616.9561 1081.1875 1567.9678 988.6348 Y
1652.959 1103.4663 1631.4229 1137.7783 V
1659.6738 1151.2002 1677.0439 1169.2988 1677.3994 1189.48 c
f
0 0.917647 0.827451 0 1 0.2 0.2 (R=255 G=51 B=51) 0 1 Xk
1320.6709 1077.2593 m
1310.9688 1050.751 1320.6709 1030.7109 v
1327.3408 1016.9316 1284.6924 1077.2593 y
1207.8848 1077.2593 L
1187.792 1077.2593 1171.502 1090.2837 1171.502 1106.3525 C
1171.502 1242.1196 L
1171.502 1258.188 1187.792 1271.2134 1207.8848 1271.2134 C
1377.6689 1271.2134 L
1397.7646 1271.2134 1414.0518 1258.188 1414.0518 1242.1196 C
1414.0518 1106.3525 L
1414.0518 1090.2837 1397.7646 1077.2593 1377.6689 1077.2593 C
1320.6709 1077.2593 L
f
0 0.917647 0.392157 0 1 0.2 0.411765 (R=255 G=51 B=105) 0 1 Xk
1391.3193 1152.1304 m
1316.3809 1152.1304 1255.6338 1119.2026 1255.6338 1078.5806 c
1255.6338 1078.1382 1255.6494 1077.6992 1255.6631 1077.2593 C
1284.6924 1077.2593 L
1327.3408 1016.9316 1320.6709 1030.7109 v
1310.9688 1050.751 1320.6709 1077.2593 Y
1377.6689 1077.2593 L
1397.7646 1077.2593 1414.0518 1090.2837 1414.0518 1106.3525 C
1414.0518 1151.0972 L
1406.6592 1151.7734 1399.0674 1152.1304 1391.3193 1152.1304 c
f
0.023529 0.756863 0.988235 0 0.92549 0.388235 0.141176 (R=236 G=99 B=36) 0 1 Xk
1414.0518 1242.1196 m
1414.0518 1248.8853 1411.1563 1255.1055 1406.3135 1260.0479 C
1358.083 1246.8599 1325.9531 1223.2041 1325.4688 1195.6812 c
1324.9492 1166.2676 1360.7002 1139.9961 1414.0518 1125.585 C
1414.0518 1242.1196 L
f
u
1 Ap
0.501961 0 0 0 0.427451 0.811765 0.964706 (R=109 G=207 B=246) 0 1 Xk
1113 1173 m
1113 1118.7578 1034.8291 1074.7866 938.3989 1074.7866 c
841.9692 1074.7866 763.7974 1118.7578 763.7974 1173 c
763.7974 1227.2422 841.9692 1271.2134 938.3989 1271.2134 c
1034.8291 1271.2134 1113 1227.2422 1113 1173 c
f
845.8662 1098.0625 m
845.8662 1092.5796 839.6416 1088.1284 831.9644 1088.1284 c
824.2832 1088.1284 818.0571 1092.5796 818.0571 1098.0625 c
818.0571 1103.5513 824.2832 1107.9946 831.9644 1107.9946 c
839.6416 1107.9946 845.8662 1103.5513 845.8662 1098.0625 c
f
823.0181 1067.8291 m
823.0181 1063.4902 818.0869 1059.9619 812.0029 1059.9619 c
805.9185 1059.9619 800.9912 1063.4902 800.9912 1067.8291 c
800.9912 1072.1738 805.9185 1075.6958 812.0029 1075.6958 c
818.0869 1075.6958 823.0181 1072.1738 823.0181 1067.8291 c
f
800.2466 1041.1733 m
800.2466 1037.6592 796.2612 1034.8154 791.3452 1034.8154 c
786.4292 1034.8154 782.4424 1037.6592 782.4424 1041.1733 c
782.4424 1044.686 786.4292 1047.5303 791.3452 1047.5303 c
796.2612 1047.5303 800.2466 1044.686 800.2466 1041.1733 c
f
779.6284 1016.5801 m
779.6284 1013.7715 776.4375 1011.4961 772.5054 1011.4961 c
768.5732 1011.4961 765.3882 1013.7715 765.3882 1016.5801 c
765.3882 1019.3926 768.5732 1021.665 772.5054 1021.665 c
776.4375 1021.665 779.6284 1019.3926 779.6284 1016.5801 c
f
U
0 Ap
0.411765 0.411765 0 0 0.631373 0.588235 1 (R=161 G=150 B=255) 0 1 Xk
763.7974 1173 m
763.7974 1153.9795 773.4243 1136.228 790.0669 1121.189 C
814.5034 1137.0552 829.2144 1157.4751 829.2144 1179.7598 c
829.2144 1199.2129 818.0015 1217.2441 798.8994 1232.0674 C
776.8662 1215.6279 763.7974 1195.1733 763.7974 1173 c
f
0.003922 0.505882 0.968627 0 0.964706 0.572549 0.141176 (R=246 G=146 B=36) 0 1 Xk
1178.4424 1103.376 m
1225.7207 1119.4287 1257.1641 1147.9238 1257.1641 1180.3931 c
1257.1641 1230.5542 1182.1533 1271.2134 1089.6211 1271.2134 c
997.0889 1271.2134 922.0781 1230.5542 922.0781 1180.3931 c
922.0781 1130.2412 997.0889 1089.5747 1089.6211 1089.5747 c
1104.875 1089.5747 1119.6504 1090.6816 1133.6963 1092.7529 C
1181.7402 1036.3838 1172.6094 1050.6133 v
1155.5996 1077.1216 1178.4424 1103.376 Y
f
0 0.729412 0.964706 0 0.964706 0.411765 0.141176 (R=246 G=105 B=36) 0 1 Xk
1177.2539 1257.8101 m
1173.6191 1253.2822 1171.502 1247.9004 1171.502 1242.1196 C
1171.502 1106.3525 L
1171.502 1102.8823 1172.2646 1099.5552 1173.6592 1096.4692 C
1176.209 1100.8086 1178.4424 1103.376 Y
1225.7207 1119.4287 1257.1641 1147.9238 1257.1641 1180.3931 c
1257.1641 1213.1392 1225.1934 1241.8315 1177.2539 1257.8101 C
f
0.113725 0.458824 0.760784 0 0.870588 0.588235 0.329412 (R=222 G=150 B=84) 0 1 Xk
1014.1846 1261.5034 m
959.5479 1246.543 922.0781 1215.8438 922.0781 1180.3931 c
922.0781 1139.4302 972.123 1104.8008 1040.8799 1093.4839 C
1084.5791 1111.334 1113 1140.2974 1113 1173 c
1113 1211.9673 1072.6563 1245.6328 1014.1846 1261.5034 C
f
0 0.917647 0.827451 0 1 0.2 0.2 (R=255 G=51 B=51) 0 1 Xk
664.0928 1220.4956 m
685.3086 1188.6685 666.0737 1184.4702 644.4858 1155.6836 c
639.5845 1149.1475 636.2139 1138.5703 648.5313 1117.5396 c
663.0806 1092.7007 605.8633 1027.6094 624.0225 1039.1123 c
673.0405 1070.1563 682.2974 1100.3838 683.3853 1106.6475 c
684.8691 1115.1733 672.7856 1125.1924 672.2627 1139.3423 c
671.7173 1154.0483 713.1118 1189.9956 714.7441 1203.0664 C
745.7905 1178.0127 788.272 1181.2822 v
835.6694 1184.9268 834.0225 1218.8613 y
875.5493 1213.7051 905.916 1231.9326 v
936.2808 1250.1602 918.9863 1292.3887 y
958.2041 1292.3887 951.665 1346.3086 v
948.4775 1372.6099 901.0146 1374.0854 y
921.9971 1429.1582 891.2119 1444.3452 v
864.8057 1457.3745 830.7549 1437.8101 y
816.8364 1471.8179 778.5503 1469.1753 v
740.2632 1466.5371 730.6567 1439.5938 y
709.4033 1465.2197 664.6445 1454.1152 v
619.2988 1442.8696 618.4341 1418.4707 y
570.2207 1429.2109 545.8208 1411.8687 v
518.915 1392.7485 527.3364 1355.0981 y
505.7593 1354.9839 503.2383 1322.7246 v
499.7734 1278.3984 529.9775 1274.562 y
524.2476 1241.4575 543.1797 1227.0327 v
577.4937 1200.8882 600.3682 1218.8613 y
604.7065 1196.0522 633.0464 1192.7192 v
660.8252 1189.4512 664.0928 1220.4956 Y
f
0.129412 0.792157 0.913725 0.023529 0.819608 0.341176 0.2 (R=209 G=87 B=51) 0 1 Xk
602.1768 1420.9243 m
585.9097 1422.5732 561.1616 1422.772 545.8208 1411.8687 c
518.915 1392.7485 527.3364 1355.0981 Y
505.7593 1354.9839 503.2383 1322.7246 v
499.7734 1278.3984 529.9775 1274.562 Y
524.2476 1241.4575 543.1797 1227.0327 v
577.4937 1200.8882 600.3682 1218.8613 Y
600.5181 1218.0796 600.938 1216.7881 V
659.2192 1238.9854 697.5249 1276.5244 697.5249 1319.0981 c
697.5249 1361.3662 659.7573 1398.6685 602.1768 1420.9243 C
f
u
1 Ap
0.52549 0.333333 0.043137 0 0.490196 0.6 0.780392 (R=125 G=153 B=199) 0 1 Xk
1454.4063 1150.9463 m
1454.4063 1144.2295 1462.0293 1138.7798 1471.4355 1138.7798 c
1480.8438 1138.7798 1488.4648 1144.2295 1488.4648 1150.9463 c
1488.4648 1157.6655 1480.8438 1163.1074 1471.4355 1163.1074 c
1462.0293 1163.1074 1454.4063 1157.6655 1454.4063 1150.9463 c
f
1483.6172 1117.2285 m
1483.6172 1112.3979 1489.1104 1108.4707 1495.8838 1108.4707 c
1502.6572 1108.4707 1508.1426 1112.3979 1508.1426 1117.2285 c
1508.1426 1122.0684 1502.6572 1125.9912 1495.8838 1125.9912 c
1489.1104 1125.9912 1483.6172 1122.0684 1483.6172 1117.2285 c
f
1510.2822 1080.3438 m
1510.2822 1076.0415 1515.166 1072.5522 1521.1865 1072.5522 c
1527.2041 1072.5522 1532.0889 1076.0415 1532.0889 1080.3438 c
1532.0889 1084.6426 1527.2041 1088.1255 1521.1865 1088.1255 c
1515.166 1088.1255 1510.2822 1084.6426 1510.2822 1080.3438 c
f
1535.5371 1051.1421 m
1535.5371 1047.7041 1539.4463 1044.918 1544.2598 1044.918 c
1549.0723 1044.918 1552.9785 1047.7041 1552.9785 1051.1421 c
1552.9785 1054.5854 1549.0723 1057.3735 1544.2598 1057.3735 c
1539.4463 1057.3735 1535.5371 1054.5854 1535.5371 1051.1421 c
f
0 Ap
1520.9795 1351.6641 m
1517.3945 1354.5864 1513.6367 1357.0981 1509.7832 1359.2295 C
1510.4521 1362.5537 1510.8154 1365.9609 1510.8154 1369.4385 c
1510.8154 1404.0991 1476.2344 1432.1978 1433.5742 1432.1978 c
1422.7295 1432.1978 1412.415 1430.3745 1403.0498 1427.0972 C
1393.542 1462.71 1353.0029 1487.4077 1306.6689 1483.7705 c
1266.6504 1480.627 1234.2041 1457.2817 1223.626 1427.3589 C
1220.8467 1428.1489 1217.9297 1428.7842 1214.8252 1429.2104 c
1181.8555 1433.7368 1149.5088 1407.604 1142.0146 1367.3462 c
1136.7119 1338.9087 1145.3643 1311.8188 1162.4277 1296.2075 C
1142.3457 1268.105 1153.9502 1225.2466 1188.4375 1200.3296 c
1214.5479 1181.4648 1246.3027 1178.2974 1269.0322 1189.9688 C
1281.2637 1169.1479 1307.0938 1154.4653 1337.3066 1153.7949 c
1365.8779 1153.1577 1391.0859 1165.2231 1404.8584 1183.6694 C
1424.6621 1171.3228 1453.0547 1169.5308 1479.6621 1181.1821 c
1516.7764 1197.4331 1537.0215 1233.9756 1527.0576 1264.8032 C
1530.8369 1267.1831 1534.248 1270.1421 1537.1563 1273.707 c
1554.6738 1295.2017 1547.4316 1330.1016 1520.9795 1351.6641 c
f
U
0.333333 0.415686 0 0 0.729412 0.588235 1 (R=186 G=150 B=255) 0 1 Xk
1414.0518 1242.1196 m
1414.0518 1258.188 1397.7646 1271.2134 1377.6689 1271.2134 C
1207.8848 1271.2134 L
1187.792 1271.2134 1171.502 1258.188 1171.502 1242.1196 C
1171.502 1216.0317 L
1176.3027 1210.3101 1181.9678 1205.0049 1188.4375 1200.3296 c
1214.5479 1181.4648 1246.3027 1178.2974 1269.0322 1189.9688 C
1281.2637 1169.1479 1307.0938 1154.4653 1337.3066 1153.7949 c
1365.8779 1153.1577 1391.0859 1165.2231 1404.8584 1183.6694 C
1407.7451 1181.8701 1410.832 1180.3223 1414.0518 1178.981 C
1414.0518 1242.1196 L
f
0.219608 0.423529 1 0.023529 0.780392 0.572549 0.141176 (R=199 G=146 B=36) 0 1 Xk
1256.9121 1185.3657 m
1253.334 1221.2979 1211.2314 1251.6694 1152.6006 1264.5713 C
1152.5781 1241.6504 1165.3877 1216.9839 1188.4375 1200.3296 c
1210.1738 1184.625 1235.8164 1179.8101 1256.9121 1185.3657 C
f
0.756863 0.219608 0.505882 0.023529 0.231373 0.588235 0.541176 (R=59 G=150 B=138) 0 1 Xk
1527.0576 1264.8032 m
1530.8369 1267.1831 1534.248 1270.1421 1537.1563 1273.707 c
1554.6738 1295.2017 1547.4316 1330.1016 1520.9795 1351.6641 c
1517.3945 1354.5864 1513.6367 1357.0981 1509.7832 1359.2295 C
1510.4521 1362.5537 1510.8154 1365.9609 1510.8154 1369.4385 c
1510.8154 1402.3022 1479.7217 1429.248 1440.1357 1431.9561 C
1358.5615 1415.1235 1301.2627 1375.2959 1300.4287 1327.8618 c
1299.3438 1266.3247 1393.6709 1214.2363 1514.3691 1207.6455 C
1527.9014 1224.8521 1533.168 1245.8989 1527.0576 1264.8032 C
f
0.035294 0.137255 0.792157 0 0.968627 0.831373 0.32549 (R=247 G=212 B=83) 0 1 Xk
900.1187 1212.5386 m
835.9702 1240.4927 793.3076 1290.1025 793.3076 1346.6387 c
793.3076 1433.9712 895.0869 1504.7637 1020.6367 1504.7637 c
1146.1855 1504.7637 1247.9648 1433.9712 1247.9648 1346.6387 c
1247.9648 1259.3105 1146.1855 1188.5127 1020.6367 1188.5127 c
999.9414 1188.5127 978.2256 1192.3252 959.167 1195.9331 C
888.981 1095.897 901.3696 1120.6738 v
924.4463 1166.8276 900.1187 1212.5386 Y
f
0.023529 0.352941 0.972549 0 0.964706 0.678431 0.141176 (R=246 G=173 B=36) 0 1 Xk
1089.6211 1271.2134 m
997.0889 1271.2134 922.0781 1230.5542 922.0781 1180.3931 c
922.0781 1171.2192 924.5986 1162.3657 929.2646 1154.0186 C
944.1704 1174.5596 959.167 1195.9331 Y
978.2256 1192.3252 999.9414 1188.5127 1020.6367 1188.5127 c
1093.1973 1188.5127 1157.8193 1212.1616 1199.4414 1248.9834 C
1170.0342 1262.8306 1131.6357 1271.2134 1089.6211 1271.2134 c
f
0.164706 0.078431 0.772549 0 0.858824 0.831373 0.368627 (R=219 G=212 B=94) 0 1 Xk
1247.9648 1346.6387 m
1247.9648 1376.918 1235.7217 1405.2031 1214.5049 1429.2446 C
1181.6455 1433.5591 1149.4844 1407.4741 1142.0146 1367.3462 c
1136.7119 1338.9087 1145.3643 1311.8188 1162.4277 1296.2075 C
1147.9316 1275.9214 1149.9531 1247.9482 1165.167 1224.5825 C
1215.7314 1253.585 1247.9648 1297.4941 1247.9648 1346.6387 c
f
0 0.501961 0.741176 0 0.968627 0.580392 0.32549 (R=247 G=148 B=83) 0 1 Xk
793.3076 1346.6387 m
793.3076 1295.9795 827.5762 1250.8945 880.8481 1221.9551 C
889.3403 1224.0347 898.0063 1227.1851 905.916 1231.9326 c
936.2808 1250.1602 918.9863 1292.3887 Y
958.2041 1292.3887 951.665 1346.3086 v
948.4775 1372.6099 901.0146 1374.0854 Y
921.9971 1429.1582 891.2119 1444.3452 v
872.8428 1453.4092 850.7866 1446.7017 839.0537 1441.7793 C
810.3403 1415.3052 793.3076 1382.3569 793.3076 1346.6387 c
f
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
AGM_Gradient /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
